function [Mbd] = mbd_loc(pts,rect,...
                         R_b,R_t,H)
%Compute \int\phi_i\phi_jdsigma of shape functions over Eul cone bdy-elem
%   Shape functions are tensor products of type affine(u) by affine(v),
%    when pulled back to std I^2 rectangle by affine map, which interpolate
%    1 at their associated vertex and 0 at all others.
%   pts is a 3 x n_pts node list over the Lag coordinate cylinder mesh
%   prism is a 4 x 1 array whose first three entries are pts indices for
%    the base edge and next two are pts indices for the nodes lying 
%    directly above the base
%    RMK: intended that rect's nodes are listed in rect as
%         [x1 x2 x1 x2;...
%          z1 z1 z2 z2];
%         with z1 < z2
%   R_b, R_t, H are the geometric parameters of the cone which our Lag
%   coordinates cylinder maps onto by horizontal scaling

%% Extract the local points for this prism
P = pts(:,rect(:)');

%Reformat for use in Maple exported routine
p11 = P(1,1); p12 = P(1,2);
p21 = P(2,1); p22 = P(2,2);

z1 = P(3,1);
z2 = P(3,3);

%% Run Maple generated local assembly
Mbd = zeros(4,4);

% M(1,1)
if ((H * R_b - R_b * z1 + R_t * z1) / (R_b * z1 - R_b * z2 - R_t * z1 + R_t * z2) < 0) &&...
    (-(H * R_b - R_b * z1 + R_t * z1) / (R_b * z1 - R_b * z2 - R_t * z1 + R_t * z2) < 1) 

    Mbd(1,1) = sqrt(((-z2 + z1) ^ 4 * (R_b - R_t) ^ 2 * (H ^ 2 * R_t ^ 2 * p11 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p11 * p12 + H ^ 2 * R_t ^ 2 * p12 ^ 2 + H ^ 2 * R_t ^ 2 * p21 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p21 * p22 + H ^ 2 * R_t ^ 2 * p22 ^ 2 + R_b ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_b ^ 2 * p11 * p12 * p21 * p22 + R_b ^ 2 * p12 ^ 2 * p21 ^ 2 - 2 * R_b * R_t * p11 ^ 2 * p22 ^ 2 + 4 * R_b * R_t * p11 * p12 * p21 * p22 - 2 * R_b * R_t * p12 ^ 2 * p21 ^ 2 + R_t ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_t ^ 2 * p11 * p12 * p21 * p22 + R_t ^ 2 * p12 ^ 2 * p21 ^ 2) / R_t ^ 4 / H ^ 4)) * (H ^ 4 * R_b ^ 4 - 4 * H ^ 3 * R_b ^ 4 * z2 + 4 * H ^ 3 * R_b ^ 3 * R_t * z2 + 6 * H ^ 2 * R_b ^ 4 * z2 ^ 2 - 12 * H ^ 2 * R_b ^ 3 * R_t * z2 ^ 2 + 6 * H ^ 2 * R_b ^ 2 * R_t ^ 2 * z2 ^ 2 - 4 * H * R_b ^ 4 * z1 ^ 3 + 12 * H * R_b ^ 4 * z1 ^ 2 * z2 - 12 * H * R_b ^ 4 * z1 * z2 ^ 2 + 12 * H * R_b ^ 3 * R_t * z1 ^ 3 - 36 * H * R_b ^ 3 * R_t * z1 ^ 2 * z2 + 36 * H * R_b ^ 3 * R_t * z1 * z2 ^ 2 - 12 * H * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 + 36 * H * R_b ^ 2 * R_t ^ 2 * z1 ^ 2 * z2 - 36 * H * R_b ^ 2 * R_t ^ 2 * z1 * z2 ^ 2 + 4 * H * R_b * R_t ^ 3 * z1 ^ 3 - 12 * H * R_b * R_t ^ 3 * z1 ^ 2 * z2 + 12 * H * R_b * R_t ^ 3 * z1 * z2 ^ 2 + 3 * R_b ^ 4 * z1 ^ 4 - 8 * R_b ^ 4 * z1 ^ 3 * z2 + 6 * R_b ^ 4 * z1 ^ 2 * z2 ^ 2 - 12 * R_b ^ 3 * R_t * z1 ^ 4 + 32 * R_b ^ 3 * R_t * z1 ^ 3 * z2 - 24 * R_b ^ 3 * R_t * z1 ^ 2 * z2 ^ 2 + 18 * R_b ^ 2 * R_t ^ 2 * z1 ^ 4 - 48 * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 * z2 + 36 * R_b ^ 2 * R_t ^ 2 * z1 ^ 2 * z2 ^ 2 - 12 * R_b * R_t ^ 3 * z1 ^ 4 + 32 * R_b * R_t ^ 3 * z1 ^ 3 * z2 - 24 * R_b * R_t ^ 3 * z1 ^ 2 * z2 ^ 2 + 3 * R_t ^ 4 * z1 ^ 4 - 8 * R_t ^ 4 * z1 ^ 3 * z2 + 6 * R_t ^ 4 * z1 ^ 2 * z2 ^ 2) / (R_b ^ 4 * z1 ^ 4 - 4 * R_b ^ 4 * z1 ^ 3 * z2 + 6 * R_b ^ 4 * z1 ^ 2 * z2 ^ 2 - 4 * R_b ^ 4 * z1 * z2 ^ 3 + R_b ^ 4 * z2 ^ 4 - 4 * R_b ^ 3 * R_t * z1 ^ 4 + 16 * R_b ^ 3 * R_t * z1 ^ 3 * z2 - 24 * R_b ^ 3 * R_t * z1 ^ 2 * z2 ^ 2 + 16 * R_b ^ 3 * R_t * z1 * z2 ^ 3 - 4 * R_b ^ 3 * R_t * z2 ^ 4 + 6 * R_b ^ 2 * R_t ^ 2 * z1 ^ 4 - 24 * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 * z2 + 36 * R_b ^ 2 * R_t ^ 2 * z1 ^ 2 * z2 ^ 2 - 24 * R_b ^ 2 * R_t ^ 2 * z1 * z2 ^ 3 + 6 * R_b ^ 2 * R_t ^ 2 * z2 ^ 4 - 4 * R_b * R_t ^ 3 * z1 ^ 4 + 16 * R_b * R_t ^ 3 * z1 ^ 3 * z2 - 24 * R_b * R_t ^ 3 * z1 ^ 2 * z2 ^ 2 + 16 * R_b * R_t ^ 3 * z1 * z2 ^ 3 - 4 * R_b * R_t ^ 3 * z2 ^ 4 + R_t ^ 4 * z1 ^ 4 - 4 * R_t ^ 4 * z1 ^ 3 * z2 + 6 * R_t ^ 4 * z1 ^ 2 * z2 ^ 2 - 4 * R_t ^ 4 * z1 * z2 ^ 3 + R_t ^ 4 * z2 ^ 4) / 0.18e2;
    
end

Mbd(1,1) = Mbd(1,1) + sqrt(((H * R_b - R_b * z2 + R_t * z2) ^ 2 * (-z2 + z1) ^ 2 * (H ^ 2 * R_t ^ 2 * p11 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p11 * p12 + H ^ 2 * R_t ^ 2 * p12 ^ 2 + H ^ 2 * R_t ^ 2 * p21 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p21 * p22 + H ^ 2 * R_t ^ 2 * p22 ^ 2 + R_b ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_b ^ 2 * p11 * p12 * p21 * p22 + R_b ^ 2 * p12 ^ 2 * p21 ^ 2 - 2 * R_b * R_t * p11 ^ 2 * p22 ^ 2 + 4 * R_b * R_t * p11 * p12 * p21 * p22 - 2 * R_b * R_t * p12 ^ 2 * p21 ^ 2 + R_t ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_t ^ 2 * p11 * p12 * p21 * p22 + R_t ^ 2 * p12 ^ 2 * p21 ^ 2) / R_t ^ 4 / H ^ 4)) * (4 * H * R_b - 3 * R_b * z1 - R_b * z2 + 3 * R_t * z1 + R_t * z2) / (H * R_b - R_b * z2 + R_t * z2) / 0.36e2;

% M(1,2)
if ((H * R_b - R_b * z1 + R_t * z1) / (R_b * z1 - R_b * z2 - R_t * z1 + R_t * z2) < 0) &&...
   (-(H * R_b - R_b * z1 + R_t * z1) / (R_b * z1 - R_b * z2 - R_t * z1 + R_t * z2) < 1)

    Mbd(1,2) = sqrt(((-z2 + z1) ^ 4 * (R_b - R_t) ^ 2 * (H ^ 2 * R_t ^ 2 * p11 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p11 * p12 + H ^ 2 * R_t ^ 2 * p12 ^ 2 + H ^ 2 * R_t ^ 2 * p21 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p21 * p22 + H ^ 2 * R_t ^ 2 * p22 ^ 2 + R_b ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_b ^ 2 * p11 * p12 * p21 * p22 + R_b ^ 2 * p12 ^ 2 * p21 ^ 2 - 2 * R_b * R_t * p11 ^ 2 * p22 ^ 2 + 4 * R_b * R_t * p11 * p12 * p21 * p22 - 2 * R_b * R_t * p12 ^ 2 * p21 ^ 2 + R_t ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_t ^ 2 * p11 * p12 * p21 * p22 + R_t ^ 2 * p12 ^ 2 * p21 ^ 2) / R_t ^ 4 / H ^ 4)) * (H ^ 4 * R_b ^ 4 - 4 * H ^ 3 * R_b ^ 4 * z2 + 4 * H ^ 3 * R_b ^ 3 * R_t * z2 + 6 * H ^ 2 * R_b ^ 4 * z2 ^ 2 - 12 * H ^ 2 * R_b ^ 3 * R_t * z2 ^ 2 + 6 * H ^ 2 * R_b ^ 2 * R_t ^ 2 * z2 ^ 2 - 4 * H * R_b ^ 4 * z1 ^ 3 + 12 * H * R_b ^ 4 * z1 ^ 2 * z2 - 12 * H * R_b ^ 4 * z1 * z2 ^ 2 + 12 * H * R_b ^ 3 * R_t * z1 ^ 3 - 36 * H * R_b ^ 3 * R_t * z1 ^ 2 * z2 + 36 * H * R_b ^ 3 * R_t * z1 * z2 ^ 2 - 12 * H * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 + 36 * H * R_b ^ 2 * R_t ^ 2 * z1 ^ 2 * z2 - 36 * H * R_b ^ 2 * R_t ^ 2 * z1 * z2 ^ 2 + 4 * H * R_b * R_t ^ 3 * z1 ^ 3 - 12 * H * R_b * R_t ^ 3 * z1 ^ 2 * z2 + 12 * H * R_b * R_t ^ 3 * z1 * z2 ^ 2 + 3 * R_b ^ 4 * z1 ^ 4 - 8 * R_b ^ 4 * z1 ^ 3 * z2 + 6 * R_b ^ 4 * z1 ^ 2 * z2 ^ 2 - 12 * R_b ^ 3 * R_t * z1 ^ 4 + 32 * R_b ^ 3 * R_t * z1 ^ 3 * z2 - 24 * R_b ^ 3 * R_t * z1 ^ 2 * z2 ^ 2 + 18 * R_b ^ 2 * R_t ^ 2 * z1 ^ 4 - 48 * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 * z2 + 36 * R_b ^ 2 * R_t ^ 2 * z1 ^ 2 * z2 ^ 2 - 12 * R_b * R_t ^ 3 * z1 ^ 4 + 32 * R_b * R_t ^ 3 * z1 ^ 3 * z2 - 24 * R_b * R_t ^ 3 * z1 ^ 2 * z2 ^ 2 + 3 * R_t ^ 4 * z1 ^ 4 - 8 * R_t ^ 4 * z1 ^ 3 * z2 + 6 * R_t ^ 4 * z1 ^ 2 * z2 ^ 2) / (R_b ^ 4 * z1 ^ 4 - 4 * R_b ^ 4 * z1 ^ 3 * z2 + 6 * R_b ^ 4 * z1 ^ 2 * z2 ^ 2 - 4 * R_b ^ 4 * z1 * z2 ^ 3 + R_b ^ 4 * z2 ^ 4 - 4 * R_b ^ 3 * R_t * z1 ^ 4 + 16 * R_b ^ 3 * R_t * z1 ^ 3 * z2 - 24 * R_b ^ 3 * R_t * z1 ^ 2 * z2 ^ 2 + 16 * R_b ^ 3 * R_t * z1 * z2 ^ 3 - 4 * R_b ^ 3 * R_t * z2 ^ 4 + 6 * R_b ^ 2 * R_t ^ 2 * z1 ^ 4 - 24 * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 * z2 + 36 * R_b ^ 2 * R_t ^ 2 * z1 ^ 2 * z2 ^ 2 - 24 * R_b ^ 2 * R_t ^ 2 * z1 * z2 ^ 3 + 6 * R_b ^ 2 * R_t ^ 2 * z2 ^ 4 - 4 * R_b * R_t ^ 3 * z1 ^ 4 + 16 * R_b * R_t ^ 3 * z1 ^ 3 * z2 - 24 * R_b * R_t ^ 3 * z1 ^ 2 * z2 ^ 2 + 16 * R_b * R_t ^ 3 * z1 * z2 ^ 3 - 4 * R_b * R_t ^ 3 * z2 ^ 4 + R_t ^ 4 * z1 ^ 4 - 4 * R_t ^ 4 * z1 ^ 3 * z2 + 6 * R_t ^ 4 * z1 ^ 2 * z2 ^ 2 - 4 * R_t ^ 4 * z1 * z2 ^ 3 + R_t ^ 4 * z2 ^ 4) / 0.36e2;

end

Mbd(1,2) = Mbd(1,2) + sqrt(((H * R_b - R_b * z2 + R_t * z2) ^ 2 * (-z2 + z1) ^ 2 * (H ^ 2 * R_t ^ 2 * p11 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p11 * p12 + H ^ 2 * R_t ^ 2 * p12 ^ 2 + H ^ 2 * R_t ^ 2 * p21 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p21 * p22 + H ^ 2 * R_t ^ 2 * p22 ^ 2 + R_b ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_b ^ 2 * p11 * p12 * p21 * p22 + R_b ^ 2 * p12 ^ 2 * p21 ^ 2 - 2 * R_b * R_t * p11 ^ 2 * p22 ^ 2 + 4 * R_b * R_t * p11 * p12 * p21 * p22 - 2 * R_b * R_t * p12 ^ 2 * p21 ^ 2 + R_t ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_t ^ 2 * p11 * p12 * p21 * p22 + R_t ^ 2 * p12 ^ 2 * p21 ^ 2) / R_t ^ 4 / H ^ 4)) * (4 * H * R_b - 3 * R_b * z1 - R_b * z2 + 3 * R_t * z1 + R_t * z2) / (H * R_b - R_b * z2 + R_t * z2) / 0.72e2;

% M(1,3)
if ((H * R_b - R_b * z1 + R_t * z1) / (R_b * z1 - R_b * z2 - R_t * z1 + R_t * z2) < 0) &&...
   (-(H * R_b - R_b * z1 + R_t * z1) / (R_b * z1 - R_b * z2 - R_t * z1 + R_t * z2) < 1)

Mbd(1,3) = -sqrt(((-z2 + z1) ^ 4 * (R_b - R_t) ^ 2 * (H ^ 2 * R_t ^ 2 * p11 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p11 * p12 + H ^ 2 * R_t ^ 2 * p12 ^ 2 + H ^ 2 * R_t ^ 2 * p21 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p21 * p22 + H ^ 2 * R_t ^ 2 * p22 ^ 2 + R_b ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_b ^ 2 * p11 * p12 * p21 * p22 + R_b ^ 2 * p12 ^ 2 * p21 ^ 2 - 2 * R_b * R_t * p11 ^ 2 * p22 ^ 2 + 4 * R_b * R_t * p11 * p12 * p21 * p22 - 2 * R_b * R_t * p12 ^ 2 * p21 ^ 2 + R_t ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_t ^ 2 * p11 * p12 * p21 * p22 + R_t ^ 2 * p12 ^ 2 * p21 ^ 2) / R_t ^ 4 / H ^ 4)) * (H ^ 4 * R_b ^ 4 - 2 * H ^ 3 * R_b ^ 4 * z1 - 2 * H ^ 3 * R_b ^ 4 * z2 + 2 * H ^ 3 * R_b ^ 3 * R_t * z1 + 2 * H ^ 3 * R_b ^ 3 * R_t * z2 + 6 * H ^ 2 * R_b ^ 4 * z1 * z2 - 12 * H ^ 2 * R_b ^ 3 * R_t * z1 * z2 + 6 * H ^ 2 * R_b ^ 2 * R_t ^ 2 * z1 * z2 + 2 * H * R_b ^ 4 * z1 ^ 3 - 6 * H * R_b ^ 4 * z1 ^ 2 * z2 - 6 * H * R_b ^ 3 * R_t * z1 ^ 3 + 18 * H * R_b ^ 3 * R_t * z1 ^ 2 * z2 + 6 * H * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 - 18 * H * R_b ^ 2 * R_t ^ 2 * z1 ^ 2 * z2 - 2 * H * R_b * R_t ^ 3 * z1 ^ 3 + 6 * H * R_b * R_t ^ 3 * z1 ^ 2 * z2 - R_b ^ 4 * z1 ^ 4 + 2 * R_b ^ 4 * z1 ^ 3 * z2 + 4 * R_b ^ 3 * R_t * z1 ^ 4 - 8 * R_b ^ 3 * R_t * z1 ^ 3 * z2 - 6 * R_b ^ 2 * R_t ^ 2 * z1 ^ 4 + 12 * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 * z2 + 4 * R_b * R_t ^ 3 * z1 ^ 4 - 8 * R_b * R_t ^ 3 * z1 ^ 3 * z2 - R_t ^ 4 * z1 ^ 4 + 2 * R_t ^ 4 * z1 ^ 3 * z2) / (R_b ^ 4 * z1 ^ 4 - 4 * R_b ^ 4 * z1 ^ 3 * z2 + 6 * R_b ^ 4 * z1 ^ 2 * z2 ^ 2 - 4 * R_b ^ 4 * z1 * z2 ^ 3 + R_b ^ 4 * z2 ^ 4 - 4 * R_b ^ 3 * R_t * z1 ^ 4 + 16 * R_b ^ 3 * R_t * z1 ^ 3 * z2 - 24 * R_b ^ 3 * R_t * z1 ^ 2 * z2 ^ 2 + 16 * R_b ^ 3 * R_t * z1 * z2 ^ 3 - 4 * R_b ^ 3 * R_t * z2 ^ 4 + 6 * R_b ^ 2 * R_t ^ 2 * z1 ^ 4 - 24 * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 * z2 + 36 * R_b ^ 2 * R_t ^ 2 * z1 ^ 2 * z2 ^ 2 - 24 * R_b ^ 2 * R_t ^ 2 * z1 * z2 ^ 3 + 6 * R_b ^ 2 * R_t ^ 2 * z2 ^ 4 - 4 * R_b * R_t ^ 3 * z1 ^ 4 + 16 * R_b * R_t ^ 3 * z1 ^ 3 * z2 - 24 * R_b * R_t ^ 3 * z1 ^ 2 * z2 ^ 2 + 16 * R_b * R_t ^ 3 * z1 * z2 ^ 3 - 4 * R_b * R_t ^ 3 * z2 ^ 4 + R_t ^ 4 * z1 ^ 4 - 4 * R_t ^ 4 * z1 ^ 3 * z2 + 6 * R_t ^ 4 * z1 ^ 2 * z2 ^ 2 - 4 * R_t ^ 4 * z1 * z2 ^ 3 + R_t ^ 4 * z2 ^ 4) / 0.18e2;

end

Mbd(1,3) = Mbd(1,3) + (2 * H * R_b - R_b * z1 - R_b * z2 + R_t * z1 + R_t * z2) * sqrt(((H * R_b - R_b * z2 + R_t * z2) ^ 2 * (-z2 + z1) ^ 2 * (H ^ 2 * R_t ^ 2 * p11 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p11 * p12 + H ^ 2 * R_t ^ 2 * p12 ^ 2 + H ^ 2 * R_t ^ 2 * p21 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p21 * p22 + H ^ 2 * R_t ^ 2 * p22 ^ 2 + R_b ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_b ^ 2 * p11 * p12 * p21 * p22 + R_b ^ 2 * p12 ^ 2 * p21 ^ 2 - 2 * R_b * R_t * p11 ^ 2 * p22 ^ 2 + 4 * R_b * R_t * p11 * p12 * p21 * p22 - 2 * R_b * R_t * p12 ^ 2 * p21 ^ 2 + R_t ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_t ^ 2 * p11 * p12 * p21 * p22 + R_t ^ 2 * p12 ^ 2 * p21 ^ 2) / R_t ^ 4 / H ^ 4)) / (H * R_b - R_b * z2 + R_t * z2) / 0.36e2;

% M(1,4)
if ((H * R_b - R_b * z1 + R_t * z1) / (R_b * z1 - R_b * z2 - R_t * z1 + R_t * z2) < 0) && ...
   (-(H * R_b - R_b * z1 + R_t * z1) / (R_b * z1 - R_b * z2 - R_t * z1 + R_t * z2) < 1)

Mbd(1,4) = -sqrt(((-z2 + z1) ^ 4 * (R_b - R_t) ^ 2 * (H ^ 2 * R_t ^ 2 * p11 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p11 * p12 + H ^ 2 * R_t ^ 2 * p12 ^ 2 + H ^ 2 * R_t ^ 2 * p21 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p21 * p22 + H ^ 2 * R_t ^ 2 * p22 ^ 2 + R_b ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_b ^ 2 * p11 * p12 * p21 * p22 + R_b ^ 2 * p12 ^ 2 * p21 ^ 2 - 2 * R_b * R_t * p11 ^ 2 * p22 ^ 2 + 4 * R_b * R_t * p11 * p12 * p21 * p22 - 2 * R_b * R_t * p12 ^ 2 * p21 ^ 2 + R_t ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_t ^ 2 * p11 * p12 * p21 * p22 + R_t ^ 2 * p12 ^ 2 * p21 ^ 2) / R_t ^ 4 / H ^ 4)) * (H ^ 4 * R_b ^ 4 - 2 * H ^ 3 * R_b ^ 4 * z1 - 2 * H ^ 3 * R_b ^ 4 * z2 + 2 * H ^ 3 * R_b ^ 3 * R_t * z1 + 2 * H ^ 3 * R_b ^ 3 * R_t * z2 + 6 * H ^ 2 * R_b ^ 4 * z1 * z2 - 12 * H ^ 2 * R_b ^ 3 * R_t * z1 * z2 + 6 * H ^ 2 * R_b ^ 2 * R_t ^ 2 * z1 * z2 + 2 * H * R_b ^ 4 * z1 ^ 3 - 6 * H * R_b ^ 4 * z1 ^ 2 * z2 - 6 * H * R_b ^ 3 * R_t * z1 ^ 3 + 18 * H * R_b ^ 3 * R_t * z1 ^ 2 * z2 + 6 * H * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 - 18 * H * R_b ^ 2 * R_t ^ 2 * z1 ^ 2 * z2 - 2 * H * R_b * R_t ^ 3 * z1 ^ 3 + 6 * H * R_b * R_t ^ 3 * z1 ^ 2 * z2 - R_b ^ 4 * z1 ^ 4 + 2 * R_b ^ 4 * z1 ^ 3 * z2 + 4 * R_b ^ 3 * R_t * z1 ^ 4 - 8 * R_b ^ 3 * R_t * z1 ^ 3 * z2 - 6 * R_b ^ 2 * R_t ^ 2 * z1 ^ 4 + 12 * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 * z2 + 4 * R_b * R_t ^ 3 * z1 ^ 4 - 8 * R_b * R_t ^ 3 * z1 ^ 3 * z2 - R_t ^ 4 * z1 ^ 4 + 2 * R_t ^ 4 * z1 ^ 3 * z2) / (R_b ^ 4 * z1 ^ 4 - 4 * R_b ^ 4 * z1 ^ 3 * z2 + 6 * R_b ^ 4 * z1 ^ 2 * z2 ^ 2 - 4 * R_b ^ 4 * z1 * z2 ^ 3 + R_b ^ 4 * z2 ^ 4 - 4 * R_b ^ 3 * R_t * z1 ^ 4 + 16 * R_b ^ 3 * R_t * z1 ^ 3 * z2 - 24 * R_b ^ 3 * R_t * z1 ^ 2 * z2 ^ 2 + 16 * R_b ^ 3 * R_t * z1 * z2 ^ 3 - 4 * R_b ^ 3 * R_t * z2 ^ 4 + 6 * R_b ^ 2 * R_t ^ 2 * z1 ^ 4 - 24 * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 * z2 + 36 * R_b ^ 2 * R_t ^ 2 * z1 ^ 2 * z2 ^ 2 - 24 * R_b ^ 2 * R_t ^ 2 * z1 * z2 ^ 3 + 6 * R_b ^ 2 * R_t ^ 2 * z2 ^ 4 - 4 * R_b * R_t ^ 3 * z1 ^ 4 + 16 * R_b * R_t ^ 3 * z1 ^ 3 * z2 - 24 * R_b * R_t ^ 3 * z1 ^ 2 * z2 ^ 2 + 16 * R_b * R_t ^ 3 * z1 * z2 ^ 3 - 4 * R_b * R_t ^ 3 * z2 ^ 4 + R_t ^ 4 * z1 ^ 4 - 4 * R_t ^ 4 * z1 ^ 3 * z2 + 6 * R_t ^ 4 * z1 ^ 2 * z2 ^ 2 - 4 * R_t ^ 4 * z1 * z2 ^ 3 + R_t ^ 4 * z2 ^ 4) / 0.36e2;

end

Mbd(1,4) = Mbd(1,4) + (2 * H * R_b - R_b * z1 - R_b * z2 + R_t * z1 + R_t * z2) * sqrt(((H * R_b - R_b * z2 + R_t * z2) ^ 2 * (-z2 + z1) ^ 2 * (H ^ 2 * R_t ^ 2 * p11 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p11 * p12 + H ^ 2 * R_t ^ 2 * p12 ^ 2 + H ^ 2 * R_t ^ 2 * p21 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p21 * p22 + H ^ 2 * R_t ^ 2 * p22 ^ 2 + R_b ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_b ^ 2 * p11 * p12 * p21 * p22 + R_b ^ 2 * p12 ^ 2 * p21 ^ 2 - 2 * R_b * R_t * p11 ^ 2 * p22 ^ 2 + 4 * R_b * R_t * p11 * p12 * p21 * p22 - 2 * R_b * R_t * p12 ^ 2 * p21 ^ 2 + R_t ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_t ^ 2 * p11 * p12 * p21 * p22 + R_t ^ 2 * p12 ^ 2 * p21 ^ 2) / R_t ^ 4 / H ^ 4)) / (H * R_b - R_b * z2 + R_t * z2) / 0.72e2;

% M(2,1)
if ((H * R_b - R_b * z1 + R_t * z1) / (R_b * z1 - R_b * z2 - R_t * z1 + R_t * z2) < 0) &&...
   (-(H * R_b - R_b * z1 + R_t * z1) / (R_b * z1 - R_b * z2 - R_t * z1 + R_t * z2) < 1)

Mbd(2,1) = sqrt(((-z2 + z1) ^ 4 * (R_b - R_t) ^ 2 * (H ^ 2 * R_t ^ 2 * p11 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p11 * p12 + H ^ 2 * R_t ^ 2 * p12 ^ 2 + H ^ 2 * R_t ^ 2 * p21 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p21 * p22 + H ^ 2 * R_t ^ 2 * p22 ^ 2 + R_b ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_b ^ 2 * p11 * p12 * p21 * p22 + R_b ^ 2 * p12 ^ 2 * p21 ^ 2 - 2 * R_b * R_t * p11 ^ 2 * p22 ^ 2 + 4 * R_b * R_t * p11 * p12 * p21 * p22 - 2 * R_b * R_t * p12 ^ 2 * p21 ^ 2 + R_t ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_t ^ 2 * p11 * p12 * p21 * p22 + R_t ^ 2 * p12 ^ 2 * p21 ^ 2) / R_t ^ 4 / H ^ 4)) * (H ^ 4 * R_b ^ 4 - 4 * H ^ 3 * R_b ^ 4 * z2 + 4 * H ^ 3 * R_b ^ 3 * R_t * z2 + 6 * H ^ 2 * R_b ^ 4 * z2 ^ 2 - 12 * H ^ 2 * R_b ^ 3 * R_t * z2 ^ 2 + 6 * H ^ 2 * R_b ^ 2 * R_t ^ 2 * z2 ^ 2 - 4 * H * R_b ^ 4 * z1 ^ 3 + 12 * H * R_b ^ 4 * z1 ^ 2 * z2 - 12 * H * R_b ^ 4 * z1 * z2 ^ 2 + 12 * H * R_b ^ 3 * R_t * z1 ^ 3 - 36 * H * R_b ^ 3 * R_t * z1 ^ 2 * z2 + 36 * H * R_b ^ 3 * R_t * z1 * z2 ^ 2 - 12 * H * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 + 36 * H * R_b ^ 2 * R_t ^ 2 * z1 ^ 2 * z2 - 36 * H * R_b ^ 2 * R_t ^ 2 * z1 * z2 ^ 2 + 4 * H * R_b * R_t ^ 3 * z1 ^ 3 - 12 * H * R_b * R_t ^ 3 * z1 ^ 2 * z2 + 12 * H * R_b * R_t ^ 3 * z1 * z2 ^ 2 + 3 * R_b ^ 4 * z1 ^ 4 - 8 * R_b ^ 4 * z1 ^ 3 * z2 + 6 * R_b ^ 4 * z1 ^ 2 * z2 ^ 2 - 12 * R_b ^ 3 * R_t * z1 ^ 4 + 32 * R_b ^ 3 * R_t * z1 ^ 3 * z2 - 24 * R_b ^ 3 * R_t * z1 ^ 2 * z2 ^ 2 + 18 * R_b ^ 2 * R_t ^ 2 * z1 ^ 4 - 48 * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 * z2 + 36 * R_b ^ 2 * R_t ^ 2 * z1 ^ 2 * z2 ^ 2 - 12 * R_b * R_t ^ 3 * z1 ^ 4 + 32 * R_b * R_t ^ 3 * z1 ^ 3 * z2 - 24 * R_b * R_t ^ 3 * z1 ^ 2 * z2 ^ 2 + 3 * R_t ^ 4 * z1 ^ 4 - 8 * R_t ^ 4 * z1 ^ 3 * z2 + 6 * R_t ^ 4 * z1 ^ 2 * z2 ^ 2) / (R_b ^ 4 * z1 ^ 4 - 4 * R_b ^ 4 * z1 ^ 3 * z2 + 6 * R_b ^ 4 * z1 ^ 2 * z2 ^ 2 - 4 * R_b ^ 4 * z1 * z2 ^ 3 + R_b ^ 4 * z2 ^ 4 - 4 * R_b ^ 3 * R_t * z1 ^ 4 + 16 * R_b ^ 3 * R_t * z1 ^ 3 * z2 - 24 * R_b ^ 3 * R_t * z1 ^ 2 * z2 ^ 2 + 16 * R_b ^ 3 * R_t * z1 * z2 ^ 3 - 4 * R_b ^ 3 * R_t * z2 ^ 4 + 6 * R_b ^ 2 * R_t ^ 2 * z1 ^ 4 - 24 * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 * z2 + 36 * R_b ^ 2 * R_t ^ 2 * z1 ^ 2 * z2 ^ 2 - 24 * R_b ^ 2 * R_t ^ 2 * z1 * z2 ^ 3 + 6 * R_b ^ 2 * R_t ^ 2 * z2 ^ 4 - 4 * R_b * R_t ^ 3 * z1 ^ 4 + 16 * R_b * R_t ^ 3 * z1 ^ 3 * z2 - 24 * R_b * R_t ^ 3 * z1 ^ 2 * z2 ^ 2 + 16 * R_b * R_t ^ 3 * z1 * z2 ^ 3 - 4 * R_b * R_t ^ 3 * z2 ^ 4 + R_t ^ 4 * z1 ^ 4 - 4 * R_t ^ 4 * z1 ^ 3 * z2 + 6 * R_t ^ 4 * z1 ^ 2 * z2 ^ 2 - 4 * R_t ^ 4 * z1 * z2 ^ 3 + R_t ^ 4 * z2 ^ 4) / 0.36e2;

end

Mbd(2,1) = Mbd(2,1) + sqrt(((H * R_b - R_b * z2 + R_t * z2) ^ 2 * (-z2 + z1) ^ 2 * (H ^ 2 * R_t ^ 2 * p11 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p11 * p12 + H ^ 2 * R_t ^ 2 * p12 ^ 2 + H ^ 2 * R_t ^ 2 * p21 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p21 * p22 + H ^ 2 * R_t ^ 2 * p22 ^ 2 + R_b ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_b ^ 2 * p11 * p12 * p21 * p22 + R_b ^ 2 * p12 ^ 2 * p21 ^ 2 - 2 * R_b * R_t * p11 ^ 2 * p22 ^ 2 + 4 * R_b * R_t * p11 * p12 * p21 * p22 - 2 * R_b * R_t * p12 ^ 2 * p21 ^ 2 + R_t ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_t ^ 2 * p11 * p12 * p21 * p22 + R_t ^ 2 * p12 ^ 2 * p21 ^ 2) / R_t ^ 4 / H ^ 4)) * (4 * H * R_b - 3 * R_b * z1 - R_b * z2 + 3 * R_t * z1 + R_t * z2) / (H * R_b - R_b * z2 + R_t * z2) / 0.72e2;

% M(2,2)
if ((H * R_b - R_b * z1 + R_t * z1) / (R_b * z1 - R_b * z2 - R_t * z1 + R_t * z2) < 0) && ...
   (-(H * R_b - R_b * z1 + R_t * z1) / (R_b * z1 - R_b * z2 - R_t * z1 + R_t * z2) < 1)

Mbd(2,2) = sqrt(((-z2 + z1) ^ 4 * (R_b - R_t) ^ 2 * (H ^ 2 * R_t ^ 2 * p11 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p11 * p12 + H ^ 2 * R_t ^ 2 * p12 ^ 2 + H ^ 2 * R_t ^ 2 * p21 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p21 * p22 + H ^ 2 * R_t ^ 2 * p22 ^ 2 + R_b ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_b ^ 2 * p11 * p12 * p21 * p22 + R_b ^ 2 * p12 ^ 2 * p21 ^ 2 - 2 * R_b * R_t * p11 ^ 2 * p22 ^ 2 + 4 * R_b * R_t * p11 * p12 * p21 * p22 - 2 * R_b * R_t * p12 ^ 2 * p21 ^ 2 + R_t ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_t ^ 2 * p11 * p12 * p21 * p22 + R_t ^ 2 * p12 ^ 2 * p21 ^ 2) / R_t ^ 4 / H ^ 4)) * (H ^ 4 * R_b ^ 4 - 4 * H ^ 3 * R_b ^ 4 * z2 + 4 * H ^ 3 * R_b ^ 3 * R_t * z2 + 6 * H ^ 2 * R_b ^ 4 * z2 ^ 2 - 12 * H ^ 2 * R_b ^ 3 * R_t * z2 ^ 2 + 6 * H ^ 2 * R_b ^ 2 * R_t ^ 2 * z2 ^ 2 - 4 * H * R_b ^ 4 * z1 ^ 3 + 12 * H * R_b ^ 4 * z1 ^ 2 * z2 - 12 * H * R_b ^ 4 * z1 * z2 ^ 2 + 12 * H * R_b ^ 3 * R_t * z1 ^ 3 - 36 * H * R_b ^ 3 * R_t * z1 ^ 2 * z2 + 36 * H * R_b ^ 3 * R_t * z1 * z2 ^ 2 - 12 * H * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 + 36 * H * R_b ^ 2 * R_t ^ 2 * z1 ^ 2 * z2 - 36 * H * R_b ^ 2 * R_t ^ 2 * z1 * z2 ^ 2 + 4 * H * R_b * R_t ^ 3 * z1 ^ 3 - 12 * H * R_b * R_t ^ 3 * z1 ^ 2 * z2 + 12 * H * R_b * R_t ^ 3 * z1 * z2 ^ 2 + 3 * R_b ^ 4 * z1 ^ 4 - 8 * R_b ^ 4 * z1 ^ 3 * z2 + 6 * R_b ^ 4 * z1 ^ 2 * z2 ^ 2 - 12 * R_b ^ 3 * R_t * z1 ^ 4 + 32 * R_b ^ 3 * R_t * z1 ^ 3 * z2 - 24 * R_b ^ 3 * R_t * z1 ^ 2 * z2 ^ 2 + 18 * R_b ^ 2 * R_t ^ 2 * z1 ^ 4 - 48 * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 * z2 + 36 * R_b ^ 2 * R_t ^ 2 * z1 ^ 2 * z2 ^ 2 - 12 * R_b * R_t ^ 3 * z1 ^ 4 + 32 * R_b * R_t ^ 3 * z1 ^ 3 * z2 - 24 * R_b * R_t ^ 3 * z1 ^ 2 * z2 ^ 2 + 3 * R_t ^ 4 * z1 ^ 4 - 8 * R_t ^ 4 * z1 ^ 3 * z2 + 6 * R_t ^ 4 * z1 ^ 2 * z2 ^ 2) / (R_b ^ 4 * z1 ^ 4 - 4 * R_b ^ 4 * z1 ^ 3 * z2 + 6 * R_b ^ 4 * z1 ^ 2 * z2 ^ 2 - 4 * R_b ^ 4 * z1 * z2 ^ 3 + R_b ^ 4 * z2 ^ 4 - 4 * R_b ^ 3 * R_t * z1 ^ 4 + 16 * R_b ^ 3 * R_t * z1 ^ 3 * z2 - 24 * R_b ^ 3 * R_t * z1 ^ 2 * z2 ^ 2 + 16 * R_b ^ 3 * R_t * z1 * z2 ^ 3 - 4 * R_b ^ 3 * R_t * z2 ^ 4 + 6 * R_b ^ 2 * R_t ^ 2 * z1 ^ 4 - 24 * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 * z2 + 36 * R_b ^ 2 * R_t ^ 2 * z1 ^ 2 * z2 ^ 2 - 24 * R_b ^ 2 * R_t ^ 2 * z1 * z2 ^ 3 + 6 * R_b ^ 2 * R_t ^ 2 * z2 ^ 4 - 4 * R_b * R_t ^ 3 * z1 ^ 4 + 16 * R_b * R_t ^ 3 * z1 ^ 3 * z2 - 24 * R_b * R_t ^ 3 * z1 ^ 2 * z2 ^ 2 + 16 * R_b * R_t ^ 3 * z1 * z2 ^ 3 - 4 * R_b * R_t ^ 3 * z2 ^ 4 + R_t ^ 4 * z1 ^ 4 - 4 * R_t ^ 4 * z1 ^ 3 * z2 + 6 * R_t ^ 4 * z1 ^ 2 * z2 ^ 2 - 4 * R_t ^ 4 * z1 * z2 ^ 3 + R_t ^ 4 * z2 ^ 4) / 0.6e1;

end

Mbd(2,2) = Mbd(2,2) / 0.3e1 + sqrt(((H * R_b - R_b * z2 + R_t * z2) ^ 2 * (-z2 + z1) ^ 2 * (H ^ 2 * R_t ^ 2 * p11 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p11 * p12 + H ^ 2 * R_t ^ 2 * p12 ^ 2 + H ^ 2 * R_t ^ 2 * p21 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p21 * p22 + H ^ 2 * R_t ^ 2 * p22 ^ 2 + R_b ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_b ^ 2 * p11 * p12 * p21 * p22 + R_b ^ 2 * p12 ^ 2 * p21 ^ 2 - 2 * R_b * R_t * p11 ^ 2 * p22 ^ 2 + 4 * R_b * R_t * p11 * p12 * p21 * p22 - 2 * R_b * R_t * p12 ^ 2 * p21 ^ 2 + R_t ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_t ^ 2 * p11 * p12 * p21 * p22 + R_t ^ 2 * p12 ^ 2 * p21 ^ 2) / R_t ^ 4 / H ^ 4)) * (4 * H * R_b - 3 * R_b * z1 - R_b * z2 + 3 * R_t * z1 + R_t * z2) / (H * R_b - R_b * z2 + R_t * z2) / 0.36e2;

% M(2,3)
if ((H * R_b - R_b * z1 + R_t * z1) / (R_b * z1 - R_b * z2 - R_t * z1 + R_t * z2) < 0) && ...
   (-(H * R_b - R_b * z1 + R_t * z1) / (R_b * z1 - R_b * z2 - R_t * z1 + R_t * z2) < 1)

Mbd(2,3) = -sqrt(((-z2 + z1) ^ 4 * (R_b - R_t) ^ 2 * (H ^ 2 * R_t ^ 2 * p11 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p11 * p12 + H ^ 2 * R_t ^ 2 * p12 ^ 2 + H ^ 2 * R_t ^ 2 * p21 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p21 * p22 + H ^ 2 * R_t ^ 2 * p22 ^ 2 + R_b ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_b ^ 2 * p11 * p12 * p21 * p22 + R_b ^ 2 * p12 ^ 2 * p21 ^ 2 - 2 * R_b * R_t * p11 ^ 2 * p22 ^ 2 + 4 * R_b * R_t * p11 * p12 * p21 * p22 - 2 * R_b * R_t * p12 ^ 2 * p21 ^ 2 + R_t ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_t ^ 2 * p11 * p12 * p21 * p22 + R_t ^ 2 * p12 ^ 2 * p21 ^ 2) / R_t ^ 4 / H ^ 4)) * (H ^ 4 * R_b ^ 4 - 2 * H ^ 3 * R_b ^ 4 * z1 - 2 * H ^ 3 * R_b ^ 4 * z2 + 2 * H ^ 3 * R_b ^ 3 * R_t * z1 + 2 * H ^ 3 * R_b ^ 3 * R_t * z2 + 6 * H ^ 2 * R_b ^ 4 * z1 * z2 - 12 * H ^ 2 * R_b ^ 3 * R_t * z1 * z2 + 6 * H ^ 2 * R_b ^ 2 * R_t ^ 2 * z1 * z2 + 2 * H * R_b ^ 4 * z1 ^ 3 - 6 * H * R_b ^ 4 * z1 ^ 2 * z2 - 6 * H * R_b ^ 3 * R_t * z1 ^ 3 + 18 * H * R_b ^ 3 * R_t * z1 ^ 2 * z2 + 6 * H * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 - 18 * H * R_b ^ 2 * R_t ^ 2 * z1 ^ 2 * z2 - 2 * H * R_b * R_t ^ 3 * z1 ^ 3 + 6 * H * R_b * R_t ^ 3 * z1 ^ 2 * z2 - R_b ^ 4 * z1 ^ 4 + 2 * R_b ^ 4 * z1 ^ 3 * z2 + 4 * R_b ^ 3 * R_t * z1 ^ 4 - 8 * R_b ^ 3 * R_t * z1 ^ 3 * z2 - 6 * R_b ^ 2 * R_t ^ 2 * z1 ^ 4 + 12 * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 * z2 + 4 * R_b * R_t ^ 3 * z1 ^ 4 - 8 * R_b * R_t ^ 3 * z1 ^ 3 * z2 - R_t ^ 4 * z1 ^ 4 + 2 * R_t ^ 4 * z1 ^ 3 * z2) / (R_b ^ 4 * z1 ^ 4 - 4 * R_b ^ 4 * z1 ^ 3 * z2 + 6 * R_b ^ 4 * z1 ^ 2 * z2 ^ 2 - 4 * R_b ^ 4 * z1 * z2 ^ 3 + R_b ^ 4 * z2 ^ 4 - 4 * R_b ^ 3 * R_t * z1 ^ 4 + 16 * R_b ^ 3 * R_t * z1 ^ 3 * z2 - 24 * R_b ^ 3 * R_t * z1 ^ 2 * z2 ^ 2 + 16 * R_b ^ 3 * R_t * z1 * z2 ^ 3 - 4 * R_b ^ 3 * R_t * z2 ^ 4 + 6 * R_b ^ 2 * R_t ^ 2 * z1 ^ 4 - 24 * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 * z2 + 36 * R_b ^ 2 * R_t ^ 2 * z1 ^ 2 * z2 ^ 2 - 24 * R_b ^ 2 * R_t ^ 2 * z1 * z2 ^ 3 + 6 * R_b ^ 2 * R_t ^ 2 * z2 ^ 4 - 4 * R_b * R_t ^ 3 * z1 ^ 4 + 16 * R_b * R_t ^ 3 * z1 ^ 3 * z2 - 24 * R_b * R_t ^ 3 * z1 ^ 2 * z2 ^ 2 + 16 * R_b * R_t ^ 3 * z1 * z2 ^ 3 - 4 * R_b * R_t ^ 3 * z2 ^ 4 + R_t ^ 4 * z1 ^ 4 - 4 * R_t ^ 4 * z1 ^ 3 * z2 + 6 * R_t ^ 4 * z1 ^ 2 * z2 ^ 2 - 4 * R_t ^ 4 * z1 * z2 ^ 3 + R_t ^ 4 * z2 ^ 4) / 0.6e1;

end

Mbd(2,3) = Mbd(2,3) / 0.6e1 + (2 * H * R_b - R_b * z1 - R_b * z2 + R_t * z1 + R_t * z2) * sqrt(((H * R_b - R_b * z2 + R_t * z2) ^ 2 * (-z2 + z1) ^ 2 * (H ^ 2 * R_t ^ 2 * p11 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p11 * p12 + H ^ 2 * R_t ^ 2 * p12 ^ 2 + H ^ 2 * R_t ^ 2 * p21 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p21 * p22 + H ^ 2 * R_t ^ 2 * p22 ^ 2 + R_b ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_b ^ 2 * p11 * p12 * p21 * p22 + R_b ^ 2 * p12 ^ 2 * p21 ^ 2 - 2 * R_b * R_t * p11 ^ 2 * p22 ^ 2 + 4 * R_b * R_t * p11 * p12 * p21 * p22 - 2 * R_b * R_t * p12 ^ 2 * p21 ^ 2 + R_t ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_t ^ 2 * p11 * p12 * p21 * p22 + R_t ^ 2 * p12 ^ 2 * p21 ^ 2) / R_t ^ 4 / H ^ 4)) / (H * R_b - R_b * z2 + R_t * z2) / 0.72e2;

% M(2,4)
if ((H * R_b - R_b * z1 + R_t * z1) / (R_b * z1 - R_b * z2 - R_t * z1 + R_t * z2) < 0) && ...
    (-(H * R_b - R_b * z1 + R_t * z1) / (R_b * z1 - R_b * z2 - R_t * z1 + R_t * z2) < 1)

Mbd(2,4) = -sqrt(((-z2 + z1) ^ 4 * (R_b - R_t) ^ 2 * (H ^ 2 * R_t ^ 2 * p11 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p11 * p12 + H ^ 2 * R_t ^ 2 * p12 ^ 2 + H ^ 2 * R_t ^ 2 * p21 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p21 * p22 + H ^ 2 * R_t ^ 2 * p22 ^ 2 + R_b ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_b ^ 2 * p11 * p12 * p21 * p22 + R_b ^ 2 * p12 ^ 2 * p21 ^ 2 - 2 * R_b * R_t * p11 ^ 2 * p22 ^ 2 + 4 * R_b * R_t * p11 * p12 * p21 * p22 - 2 * R_b * R_t * p12 ^ 2 * p21 ^ 2 + R_t ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_t ^ 2 * p11 * p12 * p21 * p22 + R_t ^ 2 * p12 ^ 2 * p21 ^ 2) / R_t ^ 4 / H ^ 4)) * (H ^ 4 * R_b ^ 4 - 2 * H ^ 3 * R_b ^ 4 * z1 - 2 * H ^ 3 * R_b ^ 4 * z2 + 2 * H ^ 3 * R_b ^ 3 * R_t * z1 + 2 * H ^ 3 * R_b ^ 3 * R_t * z2 + 6 * H ^ 2 * R_b ^ 4 * z1 * z2 - 12 * H ^ 2 * R_b ^ 3 * R_t * z1 * z2 + 6 * H ^ 2 * R_b ^ 2 * R_t ^ 2 * z1 * z2 + 2 * H * R_b ^ 4 * z1 ^ 3 - 6 * H * R_b ^ 4 * z1 ^ 2 * z2 - 6 * H * R_b ^ 3 * R_t * z1 ^ 3 + 18 * H * R_b ^ 3 * R_t * z1 ^ 2 * z2 + 6 * H * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 - 18 * H * R_b ^ 2 * R_t ^ 2 * z1 ^ 2 * z2 - 2 * H * R_b * R_t ^ 3 * z1 ^ 3 + 6 * H * R_b * R_t ^ 3 * z1 ^ 2 * z2 - R_b ^ 4 * z1 ^ 4 + 2 * R_b ^ 4 * z1 ^ 3 * z2 + 4 * R_b ^ 3 * R_t * z1 ^ 4 - 8 * R_b ^ 3 * R_t * z1 ^ 3 * z2 - 6 * R_b ^ 2 * R_t ^ 2 * z1 ^ 4 + 12 * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 * z2 + 4 * R_b * R_t ^ 3 * z1 ^ 4 - 8 * R_b * R_t ^ 3 * z1 ^ 3 * z2 - R_t ^ 4 * z1 ^ 4 + 2 * R_t ^ 4 * z1 ^ 3 * z2) / (R_b ^ 4 * z1 ^ 4 - 4 * R_b ^ 4 * z1 ^ 3 * z2 + 6 * R_b ^ 4 * z1 ^ 2 * z2 ^ 2 - 4 * R_b ^ 4 * z1 * z2 ^ 3 + R_b ^ 4 * z2 ^ 4 - 4 * R_b ^ 3 * R_t * z1 ^ 4 + 16 * R_b ^ 3 * R_t * z1 ^ 3 * z2 - 24 * R_b ^ 3 * R_t * z1 ^ 2 * z2 ^ 2 + 16 * R_b ^ 3 * R_t * z1 * z2 ^ 3 - 4 * R_b ^ 3 * R_t * z2 ^ 4 + 6 * R_b ^ 2 * R_t ^ 2 * z1 ^ 4 - 24 * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 * z2 + 36 * R_b ^ 2 * R_t ^ 2 * z1 ^ 2 * z2 ^ 2 - 24 * R_b ^ 2 * R_t ^ 2 * z1 * z2 ^ 3 + 6 * R_b ^ 2 * R_t ^ 2 * z2 ^ 4 - 4 * R_b * R_t ^ 3 * z1 ^ 4 + 16 * R_b * R_t ^ 3 * z1 ^ 3 * z2 - 24 * R_b * R_t ^ 3 * z1 ^ 2 * z2 ^ 2 + 16 * R_b * R_t ^ 3 * z1 * z2 ^ 3 - 4 * R_b * R_t ^ 3 * z2 ^ 4 + R_t ^ 4 * z1 ^ 4 - 4 * R_t ^ 4 * z1 ^ 3 * z2 + 6 * R_t ^ 4 * z1 ^ 2 * z2 ^ 2 - 4 * R_t ^ 4 * z1 * z2 ^ 3 + R_t ^ 4 * z2 ^ 4) / 0.18e2;

end

Mbd(2,4) = Mbd(2,4) + (2 * H * R_b - R_b * z1 - R_b * z2 + R_t * z1 + R_t * z2) * sqrt(((H * R_b - R_b * z2 + R_t * z2) ^ 2 * (-z2 + z1) ^ 2 * (H ^ 2 * R_t ^ 2 * p11 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p11 * p12 + H ^ 2 * R_t ^ 2 * p12 ^ 2 + H ^ 2 * R_t ^ 2 * p21 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p21 * p22 + H ^ 2 * R_t ^ 2 * p22 ^ 2 + R_b ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_b ^ 2 * p11 * p12 * p21 * p22 + R_b ^ 2 * p12 ^ 2 * p21 ^ 2 - 2 * R_b * R_t * p11 ^ 2 * p22 ^ 2 + 4 * R_b * R_t * p11 * p12 * p21 * p22 - 2 * R_b * R_t * p12 ^ 2 * p21 ^ 2 + R_t ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_t ^ 2 * p11 * p12 * p21 * p22 + R_t ^ 2 * p12 ^ 2 * p21 ^ 2) / R_t ^ 4 / H ^ 4)) / (H * R_b - R_b * z2 + R_t * z2) / 0.36e2;

% M(3,1)
if ((H * R_b - R_b * z1 + R_t * z1) / (R_b * z1 - R_b * z2 - R_t * z1 + R_t * z2) < 0) && ...
    (-(H * R_b - R_b * z1 + R_t * z1) / (R_b * z1 - R_b * z2 - R_t * z1 + R_t * z2) < 1)

Mbd(3,1) = -sqrt(((-z2 + z1) ^ 4 * (R_b - R_t) ^ 2 * (H ^ 2 * R_t ^ 2 * p11 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p11 * p12 + H ^ 2 * R_t ^ 2 * p12 ^ 2 + H ^ 2 * R_t ^ 2 * p21 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p21 * p22 + H ^ 2 * R_t ^ 2 * p22 ^ 2 + R_b ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_b ^ 2 * p11 * p12 * p21 * p22 + R_b ^ 2 * p12 ^ 2 * p21 ^ 2 - 2 * R_b * R_t * p11 ^ 2 * p22 ^ 2 + 4 * R_b * R_t * p11 * p12 * p21 * p22 - 2 * R_b * R_t * p12 ^ 2 * p21 ^ 2 + R_t ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_t ^ 2 * p11 * p12 * p21 * p22 + R_t ^ 2 * p12 ^ 2 * p21 ^ 2) / R_t ^ 4 / H ^ 4)) * (H ^ 4 * R_b ^ 4 - 2 * H ^ 3 * R_b ^ 4 * z1 - 2 * H ^ 3 * R_b ^ 4 * z2 + 2 * H ^ 3 * R_b ^ 3 * R_t * z1 + 2 * H ^ 3 * R_b ^ 3 * R_t * z2 + 6 * H ^ 2 * R_b ^ 4 * z1 * z2 - 12 * H ^ 2 * R_b ^ 3 * R_t * z1 * z2 + 6 * H ^ 2 * R_b ^ 2 * R_t ^ 2 * z1 * z2 + 2 * H * R_b ^ 4 * z1 ^ 3 - 6 * H * R_b ^ 4 * z1 ^ 2 * z2 - 6 * H * R_b ^ 3 * R_t * z1 ^ 3 + 18 * H * R_b ^ 3 * R_t * z1 ^ 2 * z2 + 6 * H * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 - 18 * H * R_b ^ 2 * R_t ^ 2 * z1 ^ 2 * z2 - 2 * H * R_b * R_t ^ 3 * z1 ^ 3 + 6 * H * R_b * R_t ^ 3 * z1 ^ 2 * z2 - R_b ^ 4 * z1 ^ 4 + 2 * R_b ^ 4 * z1 ^ 3 * z2 + 4 * R_b ^ 3 * R_t * z1 ^ 4 - 8 * R_b ^ 3 * R_t * z1 ^ 3 * z2 - 6 * R_b ^ 2 * R_t ^ 2 * z1 ^ 4 + 12 * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 * z2 + 4 * R_b * R_t ^ 3 * z1 ^ 4 - 8 * R_b * R_t ^ 3 * z1 ^ 3 * z2 - R_t ^ 4 * z1 ^ 4 + 2 * R_t ^ 4 * z1 ^ 3 * z2) / (R_b ^ 4 * z1 ^ 4 - 4 * R_b ^ 4 * z1 ^ 3 * z2 + 6 * R_b ^ 4 * z1 ^ 2 * z2 ^ 2 - 4 * R_b ^ 4 * z1 * z2 ^ 3 + R_b ^ 4 * z2 ^ 4 - 4 * R_b ^ 3 * R_t * z1 ^ 4 + 16 * R_b ^ 3 * R_t * z1 ^ 3 * z2 - 24 * R_b ^ 3 * R_t * z1 ^ 2 * z2 ^ 2 + 16 * R_b ^ 3 * R_t * z1 * z2 ^ 3 - 4 * R_b ^ 3 * R_t * z2 ^ 4 + 6 * R_b ^ 2 * R_t ^ 2 * z1 ^ 4 - 24 * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 * z2 + 36 * R_b ^ 2 * R_t ^ 2 * z1 ^ 2 * z2 ^ 2 - 24 * R_b ^ 2 * R_t ^ 2 * z1 * z2 ^ 3 + 6 * R_b ^ 2 * R_t ^ 2 * z2 ^ 4 - 4 * R_b * R_t ^ 3 * z1 ^ 4 + 16 * R_b * R_t ^ 3 * z1 ^ 3 * z2 - 24 * R_b * R_t ^ 3 * z1 ^ 2 * z2 ^ 2 + 16 * R_b * R_t ^ 3 * z1 * z2 ^ 3 - 4 * R_b * R_t ^ 3 * z2 ^ 4 + R_t ^ 4 * z1 ^ 4 - 4 * R_t ^ 4 * z1 ^ 3 * z2 + 6 * R_t ^ 4 * z1 ^ 2 * z2 ^ 2 - 4 * R_t ^ 4 * z1 * z2 ^ 3 + R_t ^ 4 * z2 ^ 4) / 0.18e2;

end

Mbd(3,1) = Mbd(3,1) + (2 * H * R_b - R_b * z1 - R_b * z2 + R_t * z1 + R_t * z2) * sqrt(((H * R_b - R_b * z2 + R_t * z2) ^ 2 * (-z2 + z1) ^ 2 * (H ^ 2 * R_t ^ 2 * p11 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p11 * p12 + H ^ 2 * R_t ^ 2 * p12 ^ 2 + H ^ 2 * R_t ^ 2 * p21 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p21 * p22 + H ^ 2 * R_t ^ 2 * p22 ^ 2 + R_b ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_b ^ 2 * p11 * p12 * p21 * p22 + R_b ^ 2 * p12 ^ 2 * p21 ^ 2 - 2 * R_b * R_t * p11 ^ 2 * p22 ^ 2 + 4 * R_b * R_t * p11 * p12 * p21 * p22 - 2 * R_b * R_t * p12 ^ 2 * p21 ^ 2 + R_t ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_t ^ 2 * p11 * p12 * p21 * p22 + R_t ^ 2 * p12 ^ 2 * p21 ^ 2) / R_t ^ 4 / H ^ 4)) / (H * R_b - R_b * z2 + R_t * z2) / 0.36e2;

% M(3,2)
if ((H * R_b - R_b * z1 + R_t * z1) / (R_b * z1 - R_b * z2 - R_t * z1 + R_t * z2) < 0) && ...
   (-(H * R_b - R_b * z1 + R_t * z1) / (R_b * z1 - R_b * z2 - R_t * z1 + R_t * z2) < 1)

Mbd(3,2) = -sqrt(((-z2 + z1) ^ 4 * (R_b - R_t) ^ 2 * (H ^ 2 * R_t ^ 2 * p11 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p11 * p12 + H ^ 2 * R_t ^ 2 * p12 ^ 2 + H ^ 2 * R_t ^ 2 * p21 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p21 * p22 + H ^ 2 * R_t ^ 2 * p22 ^ 2 + R_b ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_b ^ 2 * p11 * p12 * p21 * p22 + R_b ^ 2 * p12 ^ 2 * p21 ^ 2 - 2 * R_b * R_t * p11 ^ 2 * p22 ^ 2 + 4 * R_b * R_t * p11 * p12 * p21 * p22 - 2 * R_b * R_t * p12 ^ 2 * p21 ^ 2 + R_t ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_t ^ 2 * p11 * p12 * p21 * p22 + R_t ^ 2 * p12 ^ 2 * p21 ^ 2) / R_t ^ 4 / H ^ 4)) * (H ^ 4 * R_b ^ 4 - 2 * H ^ 3 * R_b ^ 4 * z1 - 2 * H ^ 3 * R_b ^ 4 * z2 + 2 * H ^ 3 * R_b ^ 3 * R_t * z1 + 2 * H ^ 3 * R_b ^ 3 * R_t * z2 + 6 * H ^ 2 * R_b ^ 4 * z1 * z2 - 12 * H ^ 2 * R_b ^ 3 * R_t * z1 * z2 + 6 * H ^ 2 * R_b ^ 2 * R_t ^ 2 * z1 * z2 + 2 * H * R_b ^ 4 * z1 ^ 3 - 6 * H * R_b ^ 4 * z1 ^ 2 * z2 - 6 * H * R_b ^ 3 * R_t * z1 ^ 3 + 18 * H * R_b ^ 3 * R_t * z1 ^ 2 * z2 + 6 * H * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 - 18 * H * R_b ^ 2 * R_t ^ 2 * z1 ^ 2 * z2 - 2 * H * R_b * R_t ^ 3 * z1 ^ 3 + 6 * H * R_b * R_t ^ 3 * z1 ^ 2 * z2 - R_b ^ 4 * z1 ^ 4 + 2 * R_b ^ 4 * z1 ^ 3 * z2 + 4 * R_b ^ 3 * R_t * z1 ^ 4 - 8 * R_b ^ 3 * R_t * z1 ^ 3 * z2 - 6 * R_b ^ 2 * R_t ^ 2 * z1 ^ 4 + 12 * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 * z2 + 4 * R_b * R_t ^ 3 * z1 ^ 4 - 8 * R_b * R_t ^ 3 * z1 ^ 3 * z2 - R_t ^ 4 * z1 ^ 4 + 2 * R_t ^ 4 * z1 ^ 3 * z2) / (R_b ^ 4 * z1 ^ 4 - 4 * R_b ^ 4 * z1 ^ 3 * z2 + 6 * R_b ^ 4 * z1 ^ 2 * z2 ^ 2 - 4 * R_b ^ 4 * z1 * z2 ^ 3 + R_b ^ 4 * z2 ^ 4 - 4 * R_b ^ 3 * R_t * z1 ^ 4 + 16 * R_b ^ 3 * R_t * z1 ^ 3 * z2 - 24 * R_b ^ 3 * R_t * z1 ^ 2 * z2 ^ 2 + 16 * R_b ^ 3 * R_t * z1 * z2 ^ 3 - 4 * R_b ^ 3 * R_t * z2 ^ 4 + 6 * R_b ^ 2 * R_t ^ 2 * z1 ^ 4 - 24 * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 * z2 + 36 * R_b ^ 2 * R_t ^ 2 * z1 ^ 2 * z2 ^ 2 - 24 * R_b ^ 2 * R_t ^ 2 * z1 * z2 ^ 3 + 6 * R_b ^ 2 * R_t ^ 2 * z2 ^ 4 - 4 * R_b * R_t ^ 3 * z1 ^ 4 + 16 * R_b * R_t ^ 3 * z1 ^ 3 * z2 - 24 * R_b * R_t ^ 3 * z1 ^ 2 * z2 ^ 2 + 16 * R_b * R_t ^ 3 * z1 * z2 ^ 3 - 4 * R_b * R_t ^ 3 * z2 ^ 4 + R_t ^ 4 * z1 ^ 4 - 4 * R_t ^ 4 * z1 ^ 3 * z2 + 6 * R_t ^ 4 * z1 ^ 2 * z2 ^ 2 - 4 * R_t ^ 4 * z1 * z2 ^ 3 + R_t ^ 4 * z2 ^ 4) / 0.6e1;

end

Mbd(3,2) = Mbd(3,2) / 0.6e1 + (2 * H * R_b - R_b * z1 - R_b * z2 + R_t * z1 + R_t * z2) * sqrt(((H * R_b - R_b * z2 + R_t * z2) ^ 2 * (-z2 + z1) ^ 2 * (H ^ 2 * R_t ^ 2 * p11 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p11 * p12 + H ^ 2 * R_t ^ 2 * p12 ^ 2 + H ^ 2 * R_t ^ 2 * p21 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p21 * p22 + H ^ 2 * R_t ^ 2 * p22 ^ 2 + R_b ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_b ^ 2 * p11 * p12 * p21 * p22 + R_b ^ 2 * p12 ^ 2 * p21 ^ 2 - 2 * R_b * R_t * p11 ^ 2 * p22 ^ 2 + 4 * R_b * R_t * p11 * p12 * p21 * p22 - 2 * R_b * R_t * p12 ^ 2 * p21 ^ 2 + R_t ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_t ^ 2 * p11 * p12 * p21 * p22 + R_t ^ 2 * p12 ^ 2 * p21 ^ 2) / R_t ^ 4 / H ^ 4)) / (H * R_b - R_b * z2 + R_t * z2) / 0.72e2;

% M(3,3)
if ((H * R_b - R_b * z1 + R_t * z1) / (R_b * z1 - R_b * z2 - R_t * z1 + R_t * z2) < 0) && ...
   (-(H * R_b - R_b * z1 + R_t * z1) / (R_b * z1 - R_b * z2 - R_t * z1 + R_t * z2) < 1)

Mbd(3,3) = sqrt(((-z2 + z1) ^ 4 * (R_b - R_t) ^ 2 * (H ^ 2 * R_t ^ 2 * p11 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p11 * p12 + H ^ 2 * R_t ^ 2 * p12 ^ 2 + H ^ 2 * R_t ^ 2 * p21 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p21 * p22 + H ^ 2 * R_t ^ 2 * p22 ^ 2 + R_b ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_b ^ 2 * p11 * p12 * p21 * p22 + R_b ^ 2 * p12 ^ 2 * p21 ^ 2 - 2 * R_b * R_t * p11 ^ 2 * p22 ^ 2 + 4 * R_b * R_t * p11 * p12 * p21 * p22 - 2 * R_b * R_t * p12 ^ 2 * p21 ^ 2 + R_t ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_t ^ 2 * p11 * p12 * p21 * p22 + R_t ^ 2 * p12 ^ 2 * p21 ^ 2) / R_t ^ 4 / H ^ 4)) * (H ^ 4 * R_b ^ 4 - 4 * H ^ 3 * R_b ^ 4 * z1 + 4 * H ^ 3 * R_b ^ 3 * R_t * z1 + 6 * H ^ 2 * R_b ^ 4 * z1 ^ 2 - 12 * H ^ 2 * R_b ^ 3 * R_t * z1 ^ 2 + 6 * H ^ 2 * R_b ^ 2 * R_t ^ 2 * z1 ^ 2 - 4 * H * R_b ^ 4 * z1 ^ 3 + 12 * H * R_b ^ 3 * R_t * z1 ^ 3 - 12 * H * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 + 4 * H * R_b * R_t ^ 3 * z1 ^ 3 + R_b ^ 4 * z1 ^ 4 - 4 * R_b ^ 3 * R_t * z1 ^ 4 + 6 * R_b ^ 2 * R_t ^ 2 * z1 ^ 4 - 4 * R_b * R_t ^ 3 * z1 ^ 4 + R_t ^ 4 * z1 ^ 4) / (R_b ^ 4 * z1 ^ 4 - 4 * R_b ^ 4 * z1 ^ 3 * z2 + 6 * R_b ^ 4 * z1 ^ 2 * z2 ^ 2 - 4 * R_b ^ 4 * z1 * z2 ^ 3 + R_b ^ 4 * z2 ^ 4 - 4 * R_b ^ 3 * R_t * z1 ^ 4 + 16 * R_b ^ 3 * R_t * z1 ^ 3 * z2 - 24 * R_b ^ 3 * R_t * z1 ^ 2 * z2 ^ 2 + 16 * R_b ^ 3 * R_t * z1 * z2 ^ 3 - 4 * R_b ^ 3 * R_t * z2 ^ 4 + 6 * R_b ^ 2 * R_t ^ 2 * z1 ^ 4 - 24 * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 * z2 + 36 * R_b ^ 2 * R_t ^ 2 * z1 ^ 2 * z2 ^ 2 - 24 * R_b ^ 2 * R_t ^ 2 * z1 * z2 ^ 3 + 6 * R_b ^ 2 * R_t ^ 2 * z2 ^ 4 - 4 * R_b * R_t ^ 3 * z1 ^ 4 + 16 * R_b * R_t ^ 3 * z1 ^ 3 * z2 - 24 * R_b * R_t ^ 3 * z1 ^ 2 * z2 ^ 2 + 16 * R_b * R_t ^ 3 * z1 * z2 ^ 3 - 4 * R_b * R_t ^ 3 * z2 ^ 4 + R_t ^ 4 * z1 ^ 4 - 4 * R_t ^ 4 * z1 ^ 3 * z2 + 6 * R_t ^ 4 * z1 ^ 2 * z2 ^ 2 - 4 * R_t ^ 4 * z1 * z2 ^ 3 + R_t ^ 4 * z2 ^ 4) / 0.6e1;

end

Mbd(3,3) = Mbd(3,3) / 0.3e1 + (4 * H * R_b - R_b * z1 - 3 * R_b * z2 + R_t * z1 + 3 * R_t * z2) * sqrt(((H * R_b - R_b * z2 + R_t * z2) ^ 2 * (-z2 + z1) ^ 2 * (H ^ 2 * R_t ^ 2 * p11 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p11 * p12 + H ^ 2 * R_t ^ 2 * p12 ^ 2 + H ^ 2 * R_t ^ 2 * p21 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p21 * p22 + H ^ 2 * R_t ^ 2 * p22 ^ 2 + R_b ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_b ^ 2 * p11 * p12 * p21 * p22 + R_b ^ 2 * p12 ^ 2 * p21 ^ 2 - 2 * R_b * R_t * p11 ^ 2 * p22 ^ 2 + 4 * R_b * R_t * p11 * p12 * p21 * p22 - 2 * R_b * R_t * p12 ^ 2 * p21 ^ 2 + R_t ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_t ^ 2 * p11 * p12 * p21 * p22 + R_t ^ 2 * p12 ^ 2 * p21 ^ 2) / R_t ^ 4 / H ^ 4)) / (H * R_b - R_b * z2 + R_t * z2) / 0.36e2;

% M(3,4)
if ((H * R_b - R_b * z1 + R_t * z1) / (R_b * z1 - R_b * z2 - R_t * z1 + R_t * z2) < 0) && ...
   (-(H * R_b - R_b * z1 + R_t * z1) / (R_b * z1 - R_b * z2 - R_t * z1 + R_t * z2) < 1) 

Mbd(3,4) = sqrt(((-z2 + z1) ^ 4 * (R_b - R_t) ^ 2 * (H ^ 2 * R_t ^ 2 * p11 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p11 * p12 + H ^ 2 * R_t ^ 2 * p12 ^ 2 + H ^ 2 * R_t ^ 2 * p21 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p21 * p22 + H ^ 2 * R_t ^ 2 * p22 ^ 2 + R_b ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_b ^ 2 * p11 * p12 * p21 * p22 + R_b ^ 2 * p12 ^ 2 * p21 ^ 2 - 2 * R_b * R_t * p11 ^ 2 * p22 ^ 2 + 4 * R_b * R_t * p11 * p12 * p21 * p22 - 2 * R_b * R_t * p12 ^ 2 * p21 ^ 2 + R_t ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_t ^ 2 * p11 * p12 * p21 * p22 + R_t ^ 2 * p12 ^ 2 * p21 ^ 2) / R_t ^ 4 / H ^ 4)) * (H ^ 4 * R_b ^ 4 - 4 * H ^ 3 * R_b ^ 4 * z1 + 4 * H ^ 3 * R_b ^ 3 * R_t * z1 + 6 * H ^ 2 * R_b ^ 4 * z1 ^ 2 - 12 * H ^ 2 * R_b ^ 3 * R_t * z1 ^ 2 + 6 * H ^ 2 * R_b ^ 2 * R_t ^ 2 * z1 ^ 2 - 4 * H * R_b ^ 4 * z1 ^ 3 + 12 * H * R_b ^ 3 * R_t * z1 ^ 3 - 12 * H * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 + 4 * H * R_b * R_t ^ 3 * z1 ^ 3 + R_b ^ 4 * z1 ^ 4 - 4 * R_b ^ 3 * R_t * z1 ^ 4 + 6 * R_b ^ 2 * R_t ^ 2 * z1 ^ 4 - 4 * R_b * R_t ^ 3 * z1 ^ 4 + R_t ^ 4 * z1 ^ 4) / (R_b ^ 4 * z1 ^ 4 - 4 * R_b ^ 4 * z1 ^ 3 * z2 + 6 * R_b ^ 4 * z1 ^ 2 * z2 ^ 2 - 4 * R_b ^ 4 * z1 * z2 ^ 3 + R_b ^ 4 * z2 ^ 4 - 4 * R_b ^ 3 * R_t * z1 ^ 4 + 16 * R_b ^ 3 * R_t * z1 ^ 3 * z2 - 24 * R_b ^ 3 * R_t * z1 ^ 2 * z2 ^ 2 + 16 * R_b ^ 3 * R_t * z1 * z2 ^ 3 - 4 * R_b ^ 3 * R_t * z2 ^ 4 + 6 * R_b ^ 2 * R_t ^ 2 * z1 ^ 4 - 24 * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 * z2 + 36 * R_b ^ 2 * R_t ^ 2 * z1 ^ 2 * z2 ^ 2 - 24 * R_b ^ 2 * R_t ^ 2 * z1 * z2 ^ 3 + 6 * R_b ^ 2 * R_t ^ 2 * z2 ^ 4 - 4 * R_b * R_t ^ 3 * z1 ^ 4 + 16 * R_b * R_t ^ 3 * z1 ^ 3 * z2 - 24 * R_b * R_t ^ 3 * z1 ^ 2 * z2 ^ 2 + 16 * R_b * R_t ^ 3 * z1 * z2 ^ 3 - 4 * R_b * R_t ^ 3 * z2 ^ 4 + R_t ^ 4 * z1 ^ 4 - 4 * R_t ^ 4 * z1 ^ 3 * z2 + 6 * R_t ^ 4 * z1 ^ 2 * z2 ^ 2 - 4 * R_t ^ 4 * z1 * z2 ^ 3 + R_t ^ 4 * z2 ^ 4) / 0.6e1;

end

Mbd(3,4) = Mbd(3,4) / 0.6e1 + (4 * H * R_b - R_b * z1 - 3 * R_b * z2 + R_t * z1 + 3 * R_t * z2) * sqrt(((H * R_b - R_b * z2 + R_t * z2) ^ 2 * (-z2 + z1) ^ 2 * (H ^ 2 * R_t ^ 2 * p11 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p11 * p12 + H ^ 2 * R_t ^ 2 * p12 ^ 2 + H ^ 2 * R_t ^ 2 * p21 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p21 * p22 + H ^ 2 * R_t ^ 2 * p22 ^ 2 + R_b ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_b ^ 2 * p11 * p12 * p21 * p22 + R_b ^ 2 * p12 ^ 2 * p21 ^ 2 - 2 * R_b * R_t * p11 ^ 2 * p22 ^ 2 + 4 * R_b * R_t * p11 * p12 * p21 * p22 - 2 * R_b * R_t * p12 ^ 2 * p21 ^ 2 + R_t ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_t ^ 2 * p11 * p12 * p21 * p22 + R_t ^ 2 * p12 ^ 2 * p21 ^ 2) / R_t ^ 4 / H ^ 4)) / (H * R_b - R_b * z2 + R_t * z2) / 0.72e2;

% M(4,1)
if ((H * R_b - R_b * z1 + R_t * z1) / (R_b * z1 - R_b * z2 - R_t * z1 + R_t * z2) < 0) && ...
   (-(H * R_b - R_b * z1 + R_t * z1) / (R_b * z1 - R_b * z2 - R_t * z1 + R_t * z2) < 1)

Mbd(4,1) = -sqrt(((-z2 + z1) ^ 4 * (R_b - R_t) ^ 2 * (H ^ 2 * R_t ^ 2 * p11 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p11 * p12 + H ^ 2 * R_t ^ 2 * p12 ^ 2 + H ^ 2 * R_t ^ 2 * p21 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p21 * p22 + H ^ 2 * R_t ^ 2 * p22 ^ 2 + R_b ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_b ^ 2 * p11 * p12 * p21 * p22 + R_b ^ 2 * p12 ^ 2 * p21 ^ 2 - 2 * R_b * R_t * p11 ^ 2 * p22 ^ 2 + 4 * R_b * R_t * p11 * p12 * p21 * p22 - 2 * R_b * R_t * p12 ^ 2 * p21 ^ 2 + R_t ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_t ^ 2 * p11 * p12 * p21 * p22 + R_t ^ 2 * p12 ^ 2 * p21 ^ 2) / R_t ^ 4 / H ^ 4)) * (H ^ 4 * R_b ^ 4 - 2 * H ^ 3 * R_b ^ 4 * z1 - 2 * H ^ 3 * R_b ^ 4 * z2 + 2 * H ^ 3 * R_b ^ 3 * R_t * z1 + 2 * H ^ 3 * R_b ^ 3 * R_t * z2 + 6 * H ^ 2 * R_b ^ 4 * z1 * z2 - 12 * H ^ 2 * R_b ^ 3 * R_t * z1 * z2 + 6 * H ^ 2 * R_b ^ 2 * R_t ^ 2 * z1 * z2 + 2 * H * R_b ^ 4 * z1 ^ 3 - 6 * H * R_b ^ 4 * z1 ^ 2 * z2 - 6 * H * R_b ^ 3 * R_t * z1 ^ 3 + 18 * H * R_b ^ 3 * R_t * z1 ^ 2 * z2 + 6 * H * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 - 18 * H * R_b ^ 2 * R_t ^ 2 * z1 ^ 2 * z2 - 2 * H * R_b * R_t ^ 3 * z1 ^ 3 + 6 * H * R_b * R_t ^ 3 * z1 ^ 2 * z2 - R_b ^ 4 * z1 ^ 4 + 2 * R_b ^ 4 * z1 ^ 3 * z2 + 4 * R_b ^ 3 * R_t * z1 ^ 4 - 8 * R_b ^ 3 * R_t * z1 ^ 3 * z2 - 6 * R_b ^ 2 * R_t ^ 2 * z1 ^ 4 + 12 * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 * z2 + 4 * R_b * R_t ^ 3 * z1 ^ 4 - 8 * R_b * R_t ^ 3 * z1 ^ 3 * z2 - R_t ^ 4 * z1 ^ 4 + 2 * R_t ^ 4 * z1 ^ 3 * z2) / (R_b ^ 4 * z1 ^ 4 - 4 * R_b ^ 4 * z1 ^ 3 * z2 + 6 * R_b ^ 4 * z1 ^ 2 * z2 ^ 2 - 4 * R_b ^ 4 * z1 * z2 ^ 3 + R_b ^ 4 * z2 ^ 4 - 4 * R_b ^ 3 * R_t * z1 ^ 4 + 16 * R_b ^ 3 * R_t * z1 ^ 3 * z2 - 24 * R_b ^ 3 * R_t * z1 ^ 2 * z2 ^ 2 + 16 * R_b ^ 3 * R_t * z1 * z2 ^ 3 - 4 * R_b ^ 3 * R_t * z2 ^ 4 + 6 * R_b ^ 2 * R_t ^ 2 * z1 ^ 4 - 24 * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 * z2 + 36 * R_b ^ 2 * R_t ^ 2 * z1 ^ 2 * z2 ^ 2 - 24 * R_b ^ 2 * R_t ^ 2 * z1 * z2 ^ 3 + 6 * R_b ^ 2 * R_t ^ 2 * z2 ^ 4 - 4 * R_b * R_t ^ 3 * z1 ^ 4 + 16 * R_b * R_t ^ 3 * z1 ^ 3 * z2 - 24 * R_b * R_t ^ 3 * z1 ^ 2 * z2 ^ 2 + 16 * R_b * R_t ^ 3 * z1 * z2 ^ 3 - 4 * R_b * R_t ^ 3 * z2 ^ 4 + R_t ^ 4 * z1 ^ 4 - 4 * R_t ^ 4 * z1 ^ 3 * z2 + 6 * R_t ^ 4 * z1 ^ 2 * z2 ^ 2 - 4 * R_t ^ 4 * z1 * z2 ^ 3 + R_t ^ 4 * z2 ^ 4) / 0.36e2;

end

Mbd(4,1) = Mbd(4,1) + (2 * H * R_b - R_b * z1 - R_b * z2 + R_t * z1 + R_t * z2) * sqrt(((H * R_b - R_b * z2 + R_t * z2) ^ 2 * (-z2 + z1) ^ 2 * (H ^ 2 * R_t ^ 2 * p11 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p11 * p12 + H ^ 2 * R_t ^ 2 * p12 ^ 2 + H ^ 2 * R_t ^ 2 * p21 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p21 * p22 + H ^ 2 * R_t ^ 2 * p22 ^ 2 + R_b ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_b ^ 2 * p11 * p12 * p21 * p22 + R_b ^ 2 * p12 ^ 2 * p21 ^ 2 - 2 * R_b * R_t * p11 ^ 2 * p22 ^ 2 + 4 * R_b * R_t * p11 * p12 * p21 * p22 - 2 * R_b * R_t * p12 ^ 2 * p21 ^ 2 + R_t ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_t ^ 2 * p11 * p12 * p21 * p22 + R_t ^ 2 * p12 ^ 2 * p21 ^ 2) / R_t ^ 4 / H ^ 4)) / (H * R_b - R_b * z2 + R_t * z2) / 0.72e2;

% M(4,2)
if ((H * R_b - R_b * z1 + R_t * z1) / (R_b * z1 - R_b * z2 - R_t * z1 + R_t * z2) < 0) && ...
   (-(H * R_b - R_b * z1 + R_t * z1) / (R_b * z1 - R_b * z2 - R_t * z1 + R_t * z2) < 1)

Mbd(4,2) = -sqrt(((-z2 + z1) ^ 4 * (R_b - R_t) ^ 2 * (H ^ 2 * R_t ^ 2 * p11 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p11 * p12 + H ^ 2 * R_t ^ 2 * p12 ^ 2 + H ^ 2 * R_t ^ 2 * p21 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p21 * p22 + H ^ 2 * R_t ^ 2 * p22 ^ 2 + R_b ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_b ^ 2 * p11 * p12 * p21 * p22 + R_b ^ 2 * p12 ^ 2 * p21 ^ 2 - 2 * R_b * R_t * p11 ^ 2 * p22 ^ 2 + 4 * R_b * R_t * p11 * p12 * p21 * p22 - 2 * R_b * R_t * p12 ^ 2 * p21 ^ 2 + R_t ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_t ^ 2 * p11 * p12 * p21 * p22 + R_t ^ 2 * p12 ^ 2 * p21 ^ 2) / R_t ^ 4 / H ^ 4)) * (H ^ 4 * R_b ^ 4 - 2 * H ^ 3 * R_b ^ 4 * z1 - 2 * H ^ 3 * R_b ^ 4 * z2 + 2 * H ^ 3 * R_b ^ 3 * R_t * z1 + 2 * H ^ 3 * R_b ^ 3 * R_t * z2 + 6 * H ^ 2 * R_b ^ 4 * z1 * z2 - 12 * H ^ 2 * R_b ^ 3 * R_t * z1 * z2 + 6 * H ^ 2 * R_b ^ 2 * R_t ^ 2 * z1 * z2 + 2 * H * R_b ^ 4 * z1 ^ 3 - 6 * H * R_b ^ 4 * z1 ^ 2 * z2 - 6 * H * R_b ^ 3 * R_t * z1 ^ 3 + 18 * H * R_b ^ 3 * R_t * z1 ^ 2 * z2 + 6 * H * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 - 18 * H * R_b ^ 2 * R_t ^ 2 * z1 ^ 2 * z2 - 2 * H * R_b * R_t ^ 3 * z1 ^ 3 + 6 * H * R_b * R_t ^ 3 * z1 ^ 2 * z2 - R_b ^ 4 * z1 ^ 4 + 2 * R_b ^ 4 * z1 ^ 3 * z2 + 4 * R_b ^ 3 * R_t * z1 ^ 4 - 8 * R_b ^ 3 * R_t * z1 ^ 3 * z2 - 6 * R_b ^ 2 * R_t ^ 2 * z1 ^ 4 + 12 * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 * z2 + 4 * R_b * R_t ^ 3 * z1 ^ 4 - 8 * R_b * R_t ^ 3 * z1 ^ 3 * z2 - R_t ^ 4 * z1 ^ 4 + 2 * R_t ^ 4 * z1 ^ 3 * z2) / (R_b ^ 4 * z1 ^ 4 - 4 * R_b ^ 4 * z1 ^ 3 * z2 + 6 * R_b ^ 4 * z1 ^ 2 * z2 ^ 2 - 4 * R_b ^ 4 * z1 * z2 ^ 3 + R_b ^ 4 * z2 ^ 4 - 4 * R_b ^ 3 * R_t * z1 ^ 4 + 16 * R_b ^ 3 * R_t * z1 ^ 3 * z2 - 24 * R_b ^ 3 * R_t * z1 ^ 2 * z2 ^ 2 + 16 * R_b ^ 3 * R_t * z1 * z2 ^ 3 - 4 * R_b ^ 3 * R_t * z2 ^ 4 + 6 * R_b ^ 2 * R_t ^ 2 * z1 ^ 4 - 24 * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 * z2 + 36 * R_b ^ 2 * R_t ^ 2 * z1 ^ 2 * z2 ^ 2 - 24 * R_b ^ 2 * R_t ^ 2 * z1 * z2 ^ 3 + 6 * R_b ^ 2 * R_t ^ 2 * z2 ^ 4 - 4 * R_b * R_t ^ 3 * z1 ^ 4 + 16 * R_b * R_t ^ 3 * z1 ^ 3 * z2 - 24 * R_b * R_t ^ 3 * z1 ^ 2 * z2 ^ 2 + 16 * R_b * R_t ^ 3 * z1 * z2 ^ 3 - 4 * R_b * R_t ^ 3 * z2 ^ 4 + R_t ^ 4 * z1 ^ 4 - 4 * R_t ^ 4 * z1 ^ 3 * z2 + 6 * R_t ^ 4 * z1 ^ 2 * z2 ^ 2 - 4 * R_t ^ 4 * z1 * z2 ^ 3 + R_t ^ 4 * z2 ^ 4) / 0.18e2;

end

Mbd(4,2) = Mbd(4,2) + (2 * H * R_b - R_b * z1 - R_b * z2 + R_t * z1 + R_t * z2) * sqrt(((H * R_b - R_b * z2 + R_t * z2) ^ 2 * (-z2 + z1) ^ 2 * (H ^ 2 * R_t ^ 2 * p11 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p11 * p12 + H ^ 2 * R_t ^ 2 * p12 ^ 2 + H ^ 2 * R_t ^ 2 * p21 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p21 * p22 + H ^ 2 * R_t ^ 2 * p22 ^ 2 + R_b ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_b ^ 2 * p11 * p12 * p21 * p22 + R_b ^ 2 * p12 ^ 2 * p21 ^ 2 - 2 * R_b * R_t * p11 ^ 2 * p22 ^ 2 + 4 * R_b * R_t * p11 * p12 * p21 * p22 - 2 * R_b * R_t * p12 ^ 2 * p21 ^ 2 + R_t ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_t ^ 2 * p11 * p12 * p21 * p22 + R_t ^ 2 * p12 ^ 2 * p21 ^ 2) / R_t ^ 4 / H ^ 4)) / (H * R_b - R_b * z2 + R_t * z2) / 0.36e2;

% M(4,3)
if ((H * R_b - R_b * z1 + R_t * z1) / (R_b * z1 - R_b * z2 - R_t * z1 + R_t * z2) < 0) && ...
   (-(H * R_b - R_b * z1 + R_t * z1) / (R_b * z1 - R_b * z2 - R_t * z1 + R_t * z2) < 1)

Mbd(4,3) = sqrt(((-z2 + z1) ^ 4 * (R_b - R_t) ^ 2 * (H ^ 2 * R_t ^ 2 * p11 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p11 * p12 + H ^ 2 * R_t ^ 2 * p12 ^ 2 + H ^ 2 * R_t ^ 2 * p21 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p21 * p22 + H ^ 2 * R_t ^ 2 * p22 ^ 2 + R_b ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_b ^ 2 * p11 * p12 * p21 * p22 + R_b ^ 2 * p12 ^ 2 * p21 ^ 2 - 2 * R_b * R_t * p11 ^ 2 * p22 ^ 2 + 4 * R_b * R_t * p11 * p12 * p21 * p22 - 2 * R_b * R_t * p12 ^ 2 * p21 ^ 2 + R_t ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_t ^ 2 * p11 * p12 * p21 * p22 + R_t ^ 2 * p12 ^ 2 * p21 ^ 2) / R_t ^ 4 / H ^ 4)) * (H ^ 4 * R_b ^ 4 - 4 * H ^ 3 * R_b ^ 4 * z1 + 4 * H ^ 3 * R_b ^ 3 * R_t * z1 + 6 * H ^ 2 * R_b ^ 4 * z1 ^ 2 - 12 * H ^ 2 * R_b ^ 3 * R_t * z1 ^ 2 + 6 * H ^ 2 * R_b ^ 2 * R_t ^ 2 * z1 ^ 2 - 4 * H * R_b ^ 4 * z1 ^ 3 + 12 * H * R_b ^ 3 * R_t * z1 ^ 3 - 12 * H * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 + 4 * H * R_b * R_t ^ 3 * z1 ^ 3 + R_b ^ 4 * z1 ^ 4 - 4 * R_b ^ 3 * R_t * z1 ^ 4 + 6 * R_b ^ 2 * R_t ^ 2 * z1 ^ 4 - 4 * R_b * R_t ^ 3 * z1 ^ 4 + R_t ^ 4 * z1 ^ 4) / (R_b ^ 4 * z1 ^ 4 - 4 * R_b ^ 4 * z1 ^ 3 * z2 + 6 * R_b ^ 4 * z1 ^ 2 * z2 ^ 2 - 4 * R_b ^ 4 * z1 * z2 ^ 3 + R_b ^ 4 * z2 ^ 4 - 4 * R_b ^ 3 * R_t * z1 ^ 4 + 16 * R_b ^ 3 * R_t * z1 ^ 3 * z2 - 24 * R_b ^ 3 * R_t * z1 ^ 2 * z2 ^ 2 + 16 * R_b ^ 3 * R_t * z1 * z2 ^ 3 - 4 * R_b ^ 3 * R_t * z2 ^ 4 + 6 * R_b ^ 2 * R_t ^ 2 * z1 ^ 4 - 24 * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 * z2 + 36 * R_b ^ 2 * R_t ^ 2 * z1 ^ 2 * z2 ^ 2 - 24 * R_b ^ 2 * R_t ^ 2 * z1 * z2 ^ 3 + 6 * R_b ^ 2 * R_t ^ 2 * z2 ^ 4 - 4 * R_b * R_t ^ 3 * z1 ^ 4 + 16 * R_b * R_t ^ 3 * z1 ^ 3 * z2 - 24 * R_b * R_t ^ 3 * z1 ^ 2 * z2 ^ 2 + 16 * R_b * R_t ^ 3 * z1 * z2 ^ 3 - 4 * R_b * R_t ^ 3 * z2 ^ 4 + R_t ^ 4 * z1 ^ 4 - 4 * R_t ^ 4 * z1 ^ 3 * z2 + 6 * R_t ^ 4 * z1 ^ 2 * z2 ^ 2 - 4 * R_t ^ 4 * z1 * z2 ^ 3 + R_t ^ 4 * z2 ^ 4) / 0.6e1;

end

Mbd(4,3) = Mbd(4,3) / 0.6e1 + (4 * H * R_b - R_b * z1 - 3 * R_b * z2 + R_t * z1 + 3 * R_t * z2) * sqrt(((H * R_b - R_b * z2 + R_t * z2) ^ 2 * (-z2 + z1) ^ 2 * (H ^ 2 * R_t ^ 2 * p11 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p11 * p12 + H ^ 2 * R_t ^ 2 * p12 ^ 2 + H ^ 2 * R_t ^ 2 * p21 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p21 * p22 + H ^ 2 * R_t ^ 2 * p22 ^ 2 + R_b ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_b ^ 2 * p11 * p12 * p21 * p22 + R_b ^ 2 * p12 ^ 2 * p21 ^ 2 - 2 * R_b * R_t * p11 ^ 2 * p22 ^ 2 + 4 * R_b * R_t * p11 * p12 * p21 * p22 - 2 * R_b * R_t * p12 ^ 2 * p21 ^ 2 + R_t ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_t ^ 2 * p11 * p12 * p21 * p22 + R_t ^ 2 * p12 ^ 2 * p21 ^ 2) / R_t ^ 4 / H ^ 4)) / (H * R_b - R_b * z2 + R_t * z2) / 0.72e2;

% M(4,4)
if ((H * R_b - R_b * z1 + R_t * z1) / (R_b * z1 - R_b * z2 - R_t * z1 + R_t * z2) < 0) && ...
   (-(H * R_b - R_b * z1 + R_t * z1) / (R_b * z1 - R_b * z2 - R_t * z1 + R_t * z2) < 1)

Mbd(4,4) = sqrt(((-z2 + z1) ^ 4 * (R_b - R_t) ^ 2 * (H ^ 2 * R_t ^ 2 * p11 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p11 * p12 + H ^ 2 * R_t ^ 2 * p12 ^ 2 + H ^ 2 * R_t ^ 2 * p21 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p21 * p22 + H ^ 2 * R_t ^ 2 * p22 ^ 2 + R_b ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_b ^ 2 * p11 * p12 * p21 * p22 + R_b ^ 2 * p12 ^ 2 * p21 ^ 2 - 2 * R_b * R_t * p11 ^ 2 * p22 ^ 2 + 4 * R_b * R_t * p11 * p12 * p21 * p22 - 2 * R_b * R_t * p12 ^ 2 * p21 ^ 2 + R_t ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_t ^ 2 * p11 * p12 * p21 * p22 + R_t ^ 2 * p12 ^ 2 * p21 ^ 2) / R_t ^ 4 / H ^ 4)) * (H ^ 4 * R_b ^ 4 - 4 * H ^ 3 * R_b ^ 4 * z1 + 4 * H ^ 3 * R_b ^ 3 * R_t * z1 + 6 * H ^ 2 * R_b ^ 4 * z1 ^ 2 - 12 * H ^ 2 * R_b ^ 3 * R_t * z1 ^ 2 + 6 * H ^ 2 * R_b ^ 2 * R_t ^ 2 * z1 ^ 2 - 4 * H * R_b ^ 4 * z1 ^ 3 + 12 * H * R_b ^ 3 * R_t * z1 ^ 3 - 12 * H * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 + 4 * H * R_b * R_t ^ 3 * z1 ^ 3 + R_b ^ 4 * z1 ^ 4 - 4 * R_b ^ 3 * R_t * z1 ^ 4 + 6 * R_b ^ 2 * R_t ^ 2 * z1 ^ 4 - 4 * R_b * R_t ^ 3 * z1 ^ 4 + R_t ^ 4 * z1 ^ 4) / (R_b ^ 4 * z1 ^ 4 - 4 * R_b ^ 4 * z1 ^ 3 * z2 + 6 * R_b ^ 4 * z1 ^ 2 * z2 ^ 2 - 4 * R_b ^ 4 * z1 * z2 ^ 3 + R_b ^ 4 * z2 ^ 4 - 4 * R_b ^ 3 * R_t * z1 ^ 4 + 16 * R_b ^ 3 * R_t * z1 ^ 3 * z2 - 24 * R_b ^ 3 * R_t * z1 ^ 2 * z2 ^ 2 + 16 * R_b ^ 3 * R_t * z1 * z2 ^ 3 - 4 * R_b ^ 3 * R_t * z2 ^ 4 + 6 * R_b ^ 2 * R_t ^ 2 * z1 ^ 4 - 24 * R_b ^ 2 * R_t ^ 2 * z1 ^ 3 * z2 + 36 * R_b ^ 2 * R_t ^ 2 * z1 ^ 2 * z2 ^ 2 - 24 * R_b ^ 2 * R_t ^ 2 * z1 * z2 ^ 3 + 6 * R_b ^ 2 * R_t ^ 2 * z2 ^ 4 - 4 * R_b * R_t ^ 3 * z1 ^ 4 + 16 * R_b * R_t ^ 3 * z1 ^ 3 * z2 - 24 * R_b * R_t ^ 3 * z1 ^ 2 * z2 ^ 2 + 16 * R_b * R_t ^ 3 * z1 * z2 ^ 3 - 4 * R_b * R_t ^ 3 * z2 ^ 4 + R_t ^ 4 * z1 ^ 4 - 4 * R_t ^ 4 * z1 ^ 3 * z2 + 6 * R_t ^ 4 * z1 ^ 2 * z2 ^ 2 - 4 * R_t ^ 4 * z1 * z2 ^ 3 + R_t ^ 4 * z2 ^ 4) / 0.6e1;

end

Mbd(4,4) = Mbd(4,4) / 0.3e1 + (4 * H * R_b - R_b * z1 - 3 * R_b * z2 + R_t * z1 + 3 * R_t * z2) * sqrt(((H * R_b - R_b * z2 + R_t * z2) ^ 2 * (-z2 + z1) ^ 2 * (H ^ 2 * R_t ^ 2 * p11 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p11 * p12 + H ^ 2 * R_t ^ 2 * p12 ^ 2 + H ^ 2 * R_t ^ 2 * p21 ^ 2 - 2 * H ^ 2 * R_t ^ 2 * p21 * p22 + H ^ 2 * R_t ^ 2 * p22 ^ 2 + R_b ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_b ^ 2 * p11 * p12 * p21 * p22 + R_b ^ 2 * p12 ^ 2 * p21 ^ 2 - 2 * R_b * R_t * p11 ^ 2 * p22 ^ 2 + 4 * R_b * R_t * p11 * p12 * p21 * p22 - 2 * R_b * R_t * p12 ^ 2 * p21 ^ 2 + R_t ^ 2 * p11 ^ 2 * p22 ^ 2 - 2 * R_t ^ 2 * p11 * p12 * p21 * p22 + R_t ^ 2 * p12 ^ 2 * p21 ^ 2) / R_t ^ 4 / H ^ 4)) / (H * R_b - R_b * z2 + R_t * z2) / 0.36e2;


end
