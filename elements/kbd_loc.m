function [Kbd] = kbd_loc(pts,rect,...
                         R_b,R_t,H)
%Compute \intD\phi_iD\phi_jdsigma of shape functions over Eul cone bdy-elem
%   Shape functions are tensor products of type affine(u) by affine(v),
%    when pulled back to std I^2 rectangle by affine map, which interpolate
%    1 at their associated vertex and 0 at all others.
%   pts is a 3 x n_pts node list over the Lag coordinate cylinder mesh
%   prism is a 4 x 1 array whose first three entries are pts indices for
%    the base edge and next two are pts indices for the nodes lying 
%    directly above the base
%    RMK: intended that rect's nodes are listed in rect as
%         [x1 x2 x1 x2;...
%          z1 z1 z2 z2];
%         with z1 < z2
%   R_b, R_t, H are the geometric parameters of the cone which our Lag
%   coordinates cylinder maps onto by horizontal scaling

%% Extract the local points for this prism
P = pts(:,rect(:)');

%Reformat for use in Maple exported routine
p11 = P(1,1); p12 = P(1,2);
p21 = P(2,1); p22 = P(2,2);

z1 = P(3,1);
z2 = P(3,3);

%% Run Maple generated local assembly
Kbd = zeros(4,4);

% Maple export to matlab renamed several variables
cg = H;
cg1= R_b;
cg3= R_t;
cg5= z1;
cg7= z2;

% Kbd(1,1)
Kbd(1,1) = (0.6e1 * ((cg1 - cg3) ^ 2 * p12 ^ 2 / 0.3e1 + p12 * (cg1 - cg3) ^ 2 * p11 / 0.3e1 + (cg1 - cg3) ^ 2 * p22 ^ 2 / 0.3e1 + p21 * (cg1 - cg3) ^ 2 * p22 / 0.3e1 + (cg1 - cg3) ^ 2 * p11 ^ 2 / 0.3e1 + (cg1 - cg3) ^ 2 * p21 ^ 2 / 0.3e1 + cg ^ 2 * cg3 ^ 2) * ((cg - cg7) * cg1 + cg3 * cg7) ^ 2 * log((cg - cg5) * cg1 + cg3 * cg5) - 0.6e1 * ((cg1 - cg3) ^ 2 * p12 ^ 2 / 0.3e1 + p12 * (cg1 - cg3) ^ 2 * p11 / 0.3e1 + (cg1 - cg3) ^ 2 * p22 ^ 2 / 0.3e1 + p21 * (cg1 - cg3) ^ 2 * p22 / 0.3e1 + (cg1 - cg3) ^ 2 * p11 ^ 2 / 0.3e1 + (cg1 - cg3) ^ 2 * p21 ^ 2 / 0.3e1 + cg ^ 2 * cg3 ^ 2) * ((cg - cg7) * cg1 + cg3 * cg7) ^ 2 * log((cg - cg7) * cg1 + cg3 * cg7) + 0.6e1 * (-cg7 + cg5) * ((cg1 - cg3) ^ 3 * (-cg7 + cg5) * p12 ^ 2 / 0.2e1 + p11 * (cg1 - cg3) ^ 2 * ((cg - cg7) * cg1 + cg3 * cg7) * p12 + (cg1 - cg3) ^ 3 * (-cg7 + cg5) * p22 ^ 2 / 0.2e1 + p21 * (cg1 - cg3) ^ 2 * ((cg - cg7) * cg1 + cg3 * cg7) * p22 + cg ^ 2 * ((-cg5 / 0.2e1 + 0.3e1 / 0.2e1 * cg7) * cg3 + cg1 * (cg + cg5 / 0.2e1 - 0.3e1 / 0.2e1 * cg7)) * cg3 ^ 2) * (cg1 - cg3)) * (((cg1 - cg3) ^ 2 * p12 ^ 2 + cg ^ 2 * cg3 ^ 2) * p21 ^ 2 - 0.2e1 * (p12 * (cg1 - cg3) ^ 2 * p11 + cg ^ 2 * cg3 ^ 2) * p22 * p21 + ((cg1 - cg3) ^ 2 * p11 ^ 2 + cg ^ 2 * cg3 ^ 2) * p22 ^ 2 + cg3 ^ 2 * cg ^ 2 * (-p12 + p11) ^ 2) ^ (-0.1e1 / 0.2e1) / (-cg7 + cg5) ^ 2 / (cg1 - cg3) ^ 3 / 0.6e1;

% Kbd(1,2)
Kbd(1,2) = (-0.6e1 * ((cg1 - cg3) ^ 2 * p12 ^ 2 / 0.3e1 + p12 * (cg1 - cg3) ^ 2 * p11 / 0.3e1 + (cg1 - cg3) ^ 2 * p22 ^ 2 / 0.3e1 + p21 * (cg1 - cg3) ^ 2 * p22 / 0.3e1 + (cg1 - cg3) ^ 2 * p11 ^ 2 / 0.3e1 + (cg1 - cg3) ^ 2 * p21 ^ 2 / 0.3e1 + cg ^ 2 * cg3 ^ 2) * ((cg - cg7) * cg1 + cg3 * cg7) ^ 2 * log((cg - cg5) * cg1 + cg3 * cg5) + 0.6e1 * ((cg1 - cg3) ^ 2 * p12 ^ 2 / 0.3e1 + p12 * (cg1 - cg3) ^ 2 * p11 / 0.3e1 + (cg1 - cg3) ^ 2 * p22 ^ 2 / 0.3e1 + p21 * (cg1 - cg3) ^ 2 * p22 / 0.3e1 + (cg1 - cg3) ^ 2 * p11 ^ 2 / 0.3e1 + (cg1 - cg3) ^ 2 * p21 ^ 2 / 0.3e1 + cg ^ 2 * cg3 ^ 2) * ((cg - cg7) * cg1 + cg3 * cg7) ^ 2 * log((cg - cg7) * cg1 + cg3 * cg7) - 0.6e1 * ((cg1 - cg3) ^ 2 * ((cg - cg7) * cg1 + cg3 * cg7) * p11 ^ 2 / 0.2e1 + p12 * (cg1 - cg3) ^ 3 * (-cg7 + cg5) * p11 / 0.2e1 + (cg1 - cg3) ^ 2 * ((cg - cg7) * cg1 + cg3 * cg7) * p12 ^ 2 / 0.2e1 + (cg1 - cg3) ^ 2 * ((cg - cg7) * cg1 + cg3 * cg7) * p21 ^ 2 / 0.2e1 + p22 * (cg1 - cg3) ^ 3 * (-cg7 + cg5) * p21 / 0.2e1 + (cg1 - cg3) ^ 2 * ((cg - cg7) * cg1 + cg3 * cg7) * p22 ^ 2 / 0.2e1 + cg ^ 2 * ((-cg5 / 0.2e1 + 0.3e1 / 0.2e1 * cg7) * cg3 + cg1 * (cg + cg5 / 0.2e1 - 0.3e1 / 0.2e1 * cg7)) * cg3 ^ 2) * (-cg7 + cg5) * (cg1 - cg3)) * (((cg1 - cg3) ^ 2 * p12 ^ 2 + cg ^ 2 * cg3 ^ 2) * p21 ^ 2 - 0.2e1 * (p12 * (cg1 - cg3) ^ 2 * p11 + cg ^ 2 * cg3 ^ 2) * p22 * p21 + ((cg1 - cg3) ^ 2 * p11 ^ 2 + cg ^ 2 * cg3 ^ 2) * p22 ^ 2 + cg3 ^ 2 * cg ^ 2 * (-p12 + p11) ^ 2) ^ (-0.1e1 / 0.2e1) / (-cg7 + cg5) ^ 2 / (cg1 - cg3) ^ 3 / 0.6e1;

% Kbd(1,3)
Kbd(1,3) = (-0.6e1 * ((cg - cg5) * cg1 + cg3 * cg5) * (cg3 ^ 2 * (cg ^ 2 + p11 ^ 2 / 0.3e1 + p12 * p11 / 0.3e1 + p12 ^ 2 / 0.3e1 + p21 ^ 2 / 0.3e1 + p21 * p22 / 0.3e1 + p22 ^ 2 / 0.3e1) - 0.2e1 / 0.3e1 * cg3 * (p11 ^ 2 + p12 * p11 + p12 ^ 2 + p21 ^ 2 + p21 * p22 + p22 ^ 2) * cg1 + (p11 ^ 2 + p12 * p11 + p12 ^ 2 + p21 ^ 2 + p21 * p22 + p22 ^ 2) * cg1 ^ 2 / 0.3e1) * ((cg - cg7) * cg1 + cg3 * cg7) * log((cg - cg5) * cg1 + cg3 * cg5) + 0.6e1 * ((cg - cg5) * cg1 + cg3 * cg5) * (cg3 ^ 2 * (cg ^ 2 + p11 ^ 2 / 0.3e1 + p12 * p11 / 0.3e1 + p12 ^ 2 / 0.3e1 + p21 ^ 2 / 0.3e1 + p21 * p22 / 0.3e1 + p22 ^ 2 / 0.3e1) - 0.2e1 / 0.3e1 * cg3 * (p11 ^ 2 + p12 * p11 + p12 ^ 2 + p21 ^ 2 + p21 * p22 + p22 ^ 2) * cg1 + (p11 ^ 2 + p12 * p11 + p12 ^ 2 + p21 ^ 2 + p21 * p22 + p22 ^ 2) * cg1 ^ 2 / 0.3e1) * ((cg - cg7) * cg1 + cg3 * cg7) * log((cg - cg7) * cg1 + cg3 * cg7) - 0.6e1 * (-cg7 + cg5) * (cg3 * (cg5 / 0.2e1 + cg7 / 0.2e1) + (cg - cg5 / 0.2e1 - cg7 / 0.2e1) * cg1) * (cg1 - cg3) * ((p12 * p11 + p21 * p22) * cg1 ^ 2 - 0.2e1 * (p12 * p11 + p21 * p22) * cg3 * cg1 + cg3 ^ 2 * (cg ^ 2 + p12 * p11 + p21 * p22))) * (((cg1 - cg3) ^ 2 * p12 ^ 2 + cg ^ 2 * cg3 ^ 2) * p21 ^ 2 - 0.2e1 * (p12 * (cg1 - cg3) ^ 2 * p11 + cg ^ 2 * cg3 ^ 2) * p22 * p21 + ((cg1 - cg3) ^ 2 * p11 ^ 2 + cg ^ 2 * cg3 ^ 2) * p22 ^ 2 + cg3 ^ 2 * cg ^ 2 * (-p12 + p11) ^ 2) ^ (-0.1e1 / 0.2e1) / (-cg7 + cg5) ^ 2 / (cg1 - cg3) ^ 3 / 0.6e1;

% Kbd(1,4)
Kbd(1,4) = (0.6e1 * ((cg - cg5) * cg1 + cg3 * cg5) * ((cg1 - cg3) ^ 2 * p12 ^ 2 / 0.3e1 + p12 * (cg1 - cg3) ^ 2 * p11 / 0.3e1 + (cg1 - cg3) ^ 2 * p22 ^ 2 / 0.3e1 + p21 * (cg1 - cg3) ^ 2 * p22 / 0.3e1 + (cg1 - cg3) ^ 2 * p11 ^ 2 / 0.3e1 + (cg1 - cg3) ^ 2 * p21 ^ 2 / 0.3e1 + cg ^ 2 * cg3 ^ 2) * ((cg - cg7) * cg1 + cg3 * cg7) * log((cg - cg5) * cg1 + cg3 * cg5) - 0.6e1 * ((cg - cg5) * cg1 + cg3 * cg5) * ((cg1 - cg3) ^ 2 * p12 ^ 2 / 0.3e1 + p12 * (cg1 - cg3) ^ 2 * p11 / 0.3e1 + (cg1 - cg3) ^ 2 * p22 ^ 2 / 0.3e1 + p21 * (cg1 - cg3) ^ 2 * p22 / 0.3e1 + (cg1 - cg3) ^ 2 * p11 ^ 2 / 0.3e1 + (cg1 - cg3) ^ 2 * p21 ^ 2 / 0.3e1 + cg ^ 2 * cg3 ^ 2) * ((cg - cg7) * cg1 + cg3 * cg7) * log((cg - cg7) * cg1 + cg3 * cg7) + 0.6e1 * (-cg7 + cg5) * (cg1 - cg3) * ((cg1 - cg3) ^ 2 * ((cg - cg7) * cg1 + cg3 * cg7) * p11 ^ 2 / 0.2e1 + ((cg - cg5) * cg1 + cg3 * cg5) * (cg1 - cg3) ^ 2 * p12 ^ 2 / 0.2e1 + (cg1 - cg3) ^ 2 * ((cg - cg7) * cg1 + cg3 * cg7) * p21 ^ 2 / 0.2e1 + ((cg - cg5) * cg1 + cg3 * cg5) * (cg1 - cg3) ^ 2 * p22 ^ 2 / 0.2e1 + cg ^ 2 * (cg3 * (cg5 / 0.2e1 + cg7 / 0.2e1) + (cg - cg5 / 0.2e1 - cg7 / 0.2e1) * cg1) * cg3 ^ 2)) * (((cg1 - cg3) ^ 2 * p12 ^ 2 + cg ^ 2 * cg3 ^ 2) * p21 ^ 2 - 0.2e1 * (p12 * (cg1 - cg3) ^ 2 * p11 + cg ^ 2 * cg3 ^ 2) * p22 * p21 + ((cg1 - cg3) ^ 2 * p11 ^ 2 + cg ^ 2 * cg3 ^ 2) * p22 ^ 2 + cg3 ^ 2 * cg ^ 2 * (-p12 + p11) ^ 2) ^ (-0.1e1 / 0.2e1) / (-cg7 + cg5) ^ 2 / (cg1 - cg3) ^ 3 / 0.6e1;

% Kbd(2,1)
Kbd(2,1) = (-0.6e1 * ((cg1 - cg3) ^ 2 * p12 ^ 2 / 0.3e1 + p12 * (cg1 - cg3) ^ 2 * p11 / 0.3e1 + (cg1 - cg3) ^ 2 * p22 ^ 2 / 0.3e1 + p21 * (cg1 - cg3) ^ 2 * p22 / 0.3e1 + (cg1 - cg3) ^ 2 * p11 ^ 2 / 0.3e1 + (cg1 - cg3) ^ 2 * p21 ^ 2 / 0.3e1 + cg ^ 2 * cg3 ^ 2) * ((cg - cg7) * cg1 + cg3 * cg7) ^ 2 * log((cg - cg5) * cg1 + cg3 * cg5) + 0.6e1 * ((cg1 - cg3) ^ 2 * p12 ^ 2 / 0.3e1 + p12 * (cg1 - cg3) ^ 2 * p11 / 0.3e1 + (cg1 - cg3) ^ 2 * p22 ^ 2 / 0.3e1 + p21 * (cg1 - cg3) ^ 2 * p22 / 0.3e1 + (cg1 - cg3) ^ 2 * p11 ^ 2 / 0.3e1 + (cg1 - cg3) ^ 2 * p21 ^ 2 / 0.3e1 + cg ^ 2 * cg3 ^ 2) * ((cg - cg7) * cg1 + cg3 * cg7) ^ 2 * log((cg - cg7) * cg1 + cg3 * cg7) - 0.6e1 * ((cg1 - cg3) ^ 2 * ((cg - cg7) * cg1 + cg3 * cg7) * p11 ^ 2 / 0.2e1 + p12 * (cg1 - cg3) ^ 3 * (-cg7 + cg5) * p11 / 0.2e1 + (cg1 - cg3) ^ 2 * ((cg - cg7) * cg1 + cg3 * cg7) * p12 ^ 2 / 0.2e1 + (cg1 - cg3) ^ 2 * ((cg - cg7) * cg1 + cg3 * cg7) * p21 ^ 2 / 0.2e1 + p22 * (cg1 - cg3) ^ 3 * (-cg7 + cg5) * p21 / 0.2e1 + (cg1 - cg3) ^ 2 * ((cg - cg7) * cg1 + cg3 * cg7) * p22 ^ 2 / 0.2e1 + cg ^ 2 * ((-cg5 / 0.2e1 + 0.3e1 / 0.2e1 * cg7) * cg3 + cg1 * (cg + cg5 / 0.2e1 - 0.3e1 / 0.2e1 * cg7)) * cg3 ^ 2) * (-cg7 + cg5) * (cg1 - cg3)) * (((cg1 - cg3) ^ 2 * p12 ^ 2 + cg ^ 2 * cg3 ^ 2) * p21 ^ 2 - 0.2e1 * (p12 * (cg1 - cg3) ^ 2 * p11 + cg ^ 2 * cg3 ^ 2) * p22 * p21 + ((cg1 - cg3) ^ 2 * p11 ^ 2 + cg ^ 2 * cg3 ^ 2) * p22 ^ 2 + cg3 ^ 2 * cg ^ 2 * (-p12 + p11) ^ 2) ^ (-0.1e1 / 0.2e1) / (-cg7 + cg5) ^ 2 / (cg1 - cg3) ^ 3 / 0.6e1;

% Kbd(2,2)
Kbd(2,2) = (0.6e1 * ((cg1 - cg3) ^ 2 * p12 ^ 2 / 0.3e1 + p12 * (cg1 - cg3) ^ 2 * p11 / 0.3e1 + (cg1 - cg3) ^ 2 * p22 ^ 2 / 0.3e1 + p21 * (cg1 - cg3) ^ 2 * p22 / 0.3e1 + (cg1 - cg3) ^ 2 * p11 ^ 2 / 0.3e1 + (cg1 - cg3) ^ 2 * p21 ^ 2 / 0.3e1 + cg ^ 2 * cg3 ^ 2) * ((cg - cg7) * cg1 + cg3 * cg7) ^ 2 * log((cg - cg5) * cg1 + cg3 * cg5) - 0.6e1 * ((cg1 - cg3) ^ 2 * p12 ^ 2 / 0.3e1 + p12 * (cg1 - cg3) ^ 2 * p11 / 0.3e1 + (cg1 - cg3) ^ 2 * p22 ^ 2 / 0.3e1 + p21 * (cg1 - cg3) ^ 2 * p22 / 0.3e1 + (cg1 - cg3) ^ 2 * p11 ^ 2 / 0.3e1 + (cg1 - cg3) ^ 2 * p21 ^ 2 / 0.3e1 + cg ^ 2 * cg3 ^ 2) * ((cg - cg7) * cg1 + cg3 * cg7) ^ 2 * log((cg - cg7) * cg1 + cg3 * cg7) + 0.6e1 * ((cg1 - cg3) ^ 3 * (-cg7 + cg5) * p11 ^ 2 / 0.2e1 + p11 * (cg1 - cg3) ^ 2 * ((cg - cg7) * cg1 + cg3 * cg7) * p12 + (cg1 - cg3) ^ 3 * (-cg7 + cg5) * p21 ^ 2 / 0.2e1 + p21 * (cg1 - cg3) ^ 2 * ((cg - cg7) * cg1 + cg3 * cg7) * p22 + cg ^ 2 * ((-cg5 / 0.2e1 + 0.3e1 / 0.2e1 * cg7) * cg3 + cg1 * (cg + cg5 / 0.2e1 - 0.3e1 / 0.2e1 * cg7)) * cg3 ^ 2) * (-cg7 + cg5) * (cg1 - cg3)) * (((cg1 - cg3) ^ 2 * p12 ^ 2 + cg ^ 2 * cg3 ^ 2) * p21 ^ 2 - 0.2e1 * (p12 * (cg1 - cg3) ^ 2 * p11 + cg ^ 2 * cg3 ^ 2) * p22 * p21 + ((cg1 - cg3) ^ 2 * p11 ^ 2 + cg ^ 2 * cg3 ^ 2) * p22 ^ 2 + cg3 ^ 2 * cg ^ 2 * (-p12 + p11) ^ 2) ^ (-0.1e1 / 0.2e1) / (-cg7 + cg5) ^ 2 / (cg1 - cg3) ^ 3 / 0.6e1;

% Kbd(2,3)
Kbd(2,3) = (0.6e1 * ((cg - cg5) * cg1 + cg3 * cg5) * ((cg1 - cg3) ^ 2 * p12 ^ 2 / 0.3e1 + p12 * (cg1 - cg3) ^ 2 * p11 / 0.3e1 + (cg1 - cg3) ^ 2 * p22 ^ 2 / 0.3e1 + p21 * (cg1 - cg3) ^ 2 * p22 / 0.3e1 + (cg1 - cg3) ^ 2 * p11 ^ 2 / 0.3e1 + (cg1 - cg3) ^ 2 * p21 ^ 2 / 0.3e1 + cg ^ 2 * cg3 ^ 2) * ((cg - cg7) * cg1 + cg3 * cg7) * log((cg - cg5) * cg1 + cg3 * cg5) - 0.6e1 * ((cg - cg5) * cg1 + cg3 * cg5) * ((cg1 - cg3) ^ 2 * p12 ^ 2 / 0.3e1 + p12 * (cg1 - cg3) ^ 2 * p11 / 0.3e1 + (cg1 - cg3) ^ 2 * p22 ^ 2 / 0.3e1 + p21 * (cg1 - cg3) ^ 2 * p22 / 0.3e1 + (cg1 - cg3) ^ 2 * p11 ^ 2 / 0.3e1 + (cg1 - cg3) ^ 2 * p21 ^ 2 / 0.3e1 + cg ^ 2 * cg3 ^ 2) * ((cg - cg7) * cg1 + cg3 * cg7) * log((cg - cg7) * cg1 + cg3 * cg7) + 0.6e1 * (-cg7 + cg5) * (cg1 - cg3) * (((cg - cg5) * cg1 + cg3 * cg5) * (cg1 - cg3) ^ 2 * p11 ^ 2 / 0.2e1 + (cg1 - cg3) ^ 2 * ((cg - cg7) * cg1 + cg3 * cg7) * p12 ^ 2 / 0.2e1 + ((cg - cg5) * cg1 + cg3 * cg5) * (cg1 - cg3) ^ 2 * p21 ^ 2 / 0.2e1 + (cg1 - cg3) ^ 2 * ((cg - cg7) * cg1 + cg3 * cg7) * p22 ^ 2 / 0.2e1 + cg ^ 2 * (cg3 * (cg5 / 0.2e1 + cg7 / 0.2e1) + (cg - cg5 / 0.2e1 - cg7 / 0.2e1) * cg1) * cg3 ^ 2)) * (((cg1 - cg3) ^ 2 * p12 ^ 2 + cg ^ 2 * cg3 ^ 2) * p21 ^ 2 - 0.2e1 * (p12 * (cg1 - cg3) ^ 2 * p11 + cg ^ 2 * cg3 ^ 2) * p22 * p21 + ((cg1 - cg3) ^ 2 * p11 ^ 2 + cg ^ 2 * cg3 ^ 2) * p22 ^ 2 + cg3 ^ 2 * cg ^ 2 * (-p12 + p11) ^ 2) ^ (-0.1e1 / 0.2e1) / (-cg7 + cg5) ^ 2 / (cg1 - cg3) ^ 3 / 0.6e1;

% Kbd(2,4)
Kbd(2,4) = (-0.6e1 * ((cg - cg5) * cg1 + cg3 * cg5) * (cg3 ^ 2 * (cg ^ 2 + p11 ^ 2 / 0.3e1 + p12 * p11 / 0.3e1 + p12 ^ 2 / 0.3e1 + p21 ^ 2 / 0.3e1 + p21 * p22 / 0.3e1 + p22 ^ 2 / 0.3e1) - 0.2e1 / 0.3e1 * cg3 * (p11 ^ 2 + p12 * p11 + p12 ^ 2 + p21 ^ 2 + p21 * p22 + p22 ^ 2) * cg1 + (p11 ^ 2 + p12 * p11 + p12 ^ 2 + p21 ^ 2 + p21 * p22 + p22 ^ 2) * cg1 ^ 2 / 0.3e1) * ((cg - cg7) * cg1 + cg3 * cg7) * log((cg - cg5) * cg1 + cg3 * cg5) + 0.6e1 * ((cg - cg5) * cg1 + cg3 * cg5) * (cg3 ^ 2 * (cg ^ 2 + p11 ^ 2 / 0.3e1 + p12 * p11 / 0.3e1 + p12 ^ 2 / 0.3e1 + p21 ^ 2 / 0.3e1 + p21 * p22 / 0.3e1 + p22 ^ 2 / 0.3e1) - 0.2e1 / 0.3e1 * cg3 * (p11 ^ 2 + p12 * p11 + p12 ^ 2 + p21 ^ 2 + p21 * p22 + p22 ^ 2) * cg1 + (p11 ^ 2 + p12 * p11 + p12 ^ 2 + p21 ^ 2 + p21 * p22 + p22 ^ 2) * cg1 ^ 2 / 0.3e1) * ((cg - cg7) * cg1 + cg3 * cg7) * log((cg - cg7) * cg1 + cg3 * cg7) - 0.6e1 * (-cg7 + cg5) * (cg3 * (cg5 / 0.2e1 + cg7 / 0.2e1) + (cg - cg5 / 0.2e1 - cg7 / 0.2e1) * cg1) * (cg1 - cg3) * ((p12 * p11 + p21 * p22) * cg1 ^ 2 - 0.2e1 * (p12 * p11 + p21 * p22) * cg3 * cg1 + cg3 ^ 2 * (cg ^ 2 + p12 * p11 + p21 * p22))) * (((cg1 - cg3) ^ 2 * p12 ^ 2 + cg ^ 2 * cg3 ^ 2) * p21 ^ 2 - 0.2e1 * (p12 * (cg1 - cg3) ^ 2 * p11 + cg ^ 2 * cg3 ^ 2) * p22 * p21 + ((cg1 - cg3) ^ 2 * p11 ^ 2 + cg ^ 2 * cg3 ^ 2) * p22 ^ 2 + cg3 ^ 2 * cg ^ 2 * (-p12 + p11) ^ 2) ^ (-0.1e1 / 0.2e1) / (-cg7 + cg5) ^ 2 / (cg1 - cg3) ^ 3 / 0.6e1;

% Kbd(3,1)
Kbd(3,1) = (-0.6e1 * ((cg - cg5) * cg1 + cg3 * cg5) * (cg3 ^ 2 * (cg ^ 2 + p11 ^ 2 / 0.3e1 + p12 * p11 / 0.3e1 + p12 ^ 2 / 0.3e1 + p21 ^ 2 / 0.3e1 + p21 * p22 / 0.3e1 + p22 ^ 2 / 0.3e1) - 0.2e1 / 0.3e1 * cg3 * (p11 ^ 2 + p12 * p11 + p12 ^ 2 + p21 ^ 2 + p21 * p22 + p22 ^ 2) * cg1 + (p11 ^ 2 + p12 * p11 + p12 ^ 2 + p21 ^ 2 + p21 * p22 + p22 ^ 2) * cg1 ^ 2 / 0.3e1) * ((cg - cg7) * cg1 + cg3 * cg7) * log((cg - cg5) * cg1 + cg3 * cg5) + 0.6e1 * ((cg - cg5) * cg1 + cg3 * cg5) * (cg3 ^ 2 * (cg ^ 2 + p11 ^ 2 / 0.3e1 + p12 * p11 / 0.3e1 + p12 ^ 2 / 0.3e1 + p21 ^ 2 / 0.3e1 + p21 * p22 / 0.3e1 + p22 ^ 2 / 0.3e1) - 0.2e1 / 0.3e1 * cg3 * (p11 ^ 2 + p12 * p11 + p12 ^ 2 + p21 ^ 2 + p21 * p22 + p22 ^ 2) * cg1 + (p11 ^ 2 + p12 * p11 + p12 ^ 2 + p21 ^ 2 + p21 * p22 + p22 ^ 2) * cg1 ^ 2 / 0.3e1) * ((cg - cg7) * cg1 + cg3 * cg7) * log((cg - cg7) * cg1 + cg3 * cg7) - 0.6e1 * (-cg7 + cg5) * (cg3 * (cg5 / 0.2e1 + cg7 / 0.2e1) + (cg - cg5 / 0.2e1 - cg7 / 0.2e1) * cg1) * (cg1 - cg3) * ((p12 * p11 + p21 * p22) * cg1 ^ 2 - 0.2e1 * (p12 * p11 + p21 * p22) * cg3 * cg1 + cg3 ^ 2 * (cg ^ 2 + p12 * p11 + p21 * p22))) * (((cg1 - cg3) ^ 2 * p12 ^ 2 + cg ^ 2 * cg3 ^ 2) * p21 ^ 2 - 0.2e1 * (p12 * (cg1 - cg3) ^ 2 * p11 + cg ^ 2 * cg3 ^ 2) * p22 * p21 + ((cg1 - cg3) ^ 2 * p11 ^ 2 + cg ^ 2 * cg3 ^ 2) * p22 ^ 2 + cg3 ^ 2 * cg ^ 2 * (-p12 + p11) ^ 2) ^ (-0.1e1 / 0.2e1) / (-cg7 + cg5) ^ 2 / (cg1 - cg3) ^ 3 / 0.6e1;

% Kbd(3,2)
Kbd(3,2) = (0.6e1 * ((cg - cg5) * cg1 + cg3 * cg5) * ((cg1 - cg3) ^ 2 * p12 ^ 2 / 0.3e1 + p12 * (cg1 - cg3) ^ 2 * p11 / 0.3e1 + (cg1 - cg3) ^ 2 * p22 ^ 2 / 0.3e1 + p21 * (cg1 - cg3) ^ 2 * p22 / 0.3e1 + (cg1 - cg3) ^ 2 * p11 ^ 2 / 0.3e1 + (cg1 - cg3) ^ 2 * p21 ^ 2 / 0.3e1 + cg ^ 2 * cg3 ^ 2) * ((cg - cg7) * cg1 + cg3 * cg7) * log((cg - cg5) * cg1 + cg3 * cg5) - 0.6e1 * ((cg - cg5) * cg1 + cg3 * cg5) * ((cg1 - cg3) ^ 2 * p12 ^ 2 / 0.3e1 + p12 * (cg1 - cg3) ^ 2 * p11 / 0.3e1 + (cg1 - cg3) ^ 2 * p22 ^ 2 / 0.3e1 + p21 * (cg1 - cg3) ^ 2 * p22 / 0.3e1 + (cg1 - cg3) ^ 2 * p11 ^ 2 / 0.3e1 + (cg1 - cg3) ^ 2 * p21 ^ 2 / 0.3e1 + cg ^ 2 * cg3 ^ 2) * ((cg - cg7) * cg1 + cg3 * cg7) * log((cg - cg7) * cg1 + cg3 * cg7) + 0.6e1 * (-cg7 + cg5) * (cg1 - cg3) * (((cg - cg5) * cg1 + cg3 * cg5) * (cg1 - cg3) ^ 2 * p11 ^ 2 / 0.2e1 + (cg1 - cg3) ^ 2 * ((cg - cg7) * cg1 + cg3 * cg7) * p12 ^ 2 / 0.2e1 + ((cg - cg5) * cg1 + cg3 * cg5) * (cg1 - cg3) ^ 2 * p21 ^ 2 / 0.2e1 + (cg1 - cg3) ^ 2 * ((cg - cg7) * cg1 + cg3 * cg7) * p22 ^ 2 / 0.2e1 + cg ^ 2 * (cg3 * (cg5 / 0.2e1 + cg7 / 0.2e1) + (cg - cg5 / 0.2e1 - cg7 / 0.2e1) * cg1) * cg3 ^ 2)) * (((cg1 - cg3) ^ 2 * p12 ^ 2 + cg ^ 2 * cg3 ^ 2) * p21 ^ 2 - 0.2e1 * (p12 * (cg1 - cg3) ^ 2 * p11 + cg ^ 2 * cg3 ^ 2) * p22 * p21 + ((cg1 - cg3) ^ 2 * p11 ^ 2 + cg ^ 2 * cg3 ^ 2) * p22 ^ 2 + cg3 ^ 2 * cg ^ 2 * (-p12 + p11) ^ 2) ^ (-0.1e1 / 0.2e1) / (-cg7 + cg5) ^ 2 / (cg1 - cg3) ^ 3 / 0.6e1;

% Kbd(3,3)
Kbd(3,3) = (0.6e1 * ((cg - cg5) * cg1 + cg3 * cg5) ^ 2 * ((cg1 - cg3) ^ 2 * p12 ^ 2 / 0.3e1 + p12 * (cg1 - cg3) ^ 2 * p11 / 0.3e1 + (cg1 - cg3) ^ 2 * p22 ^ 2 / 0.3e1 + p21 * (cg1 - cg3) ^ 2 * p22 / 0.3e1 + (cg1 - cg3) ^ 2 * p11 ^ 2 / 0.3e1 + (cg1 - cg3) ^ 2 * p21 ^ 2 / 0.3e1 + cg ^ 2 * cg3 ^ 2) * log((cg - cg5) * cg1 + cg3 * cg5) - 0.6e1 * ((cg - cg5) * cg1 + cg3 * cg5) ^ 2 * ((cg1 - cg3) ^ 2 * p12 ^ 2 / 0.3e1 + p12 * (cg1 - cg3) ^ 2 * p11 / 0.3e1 + (cg1 - cg3) ^ 2 * p22 ^ 2 / 0.3e1 + p21 * (cg1 - cg3) ^ 2 * p22 / 0.3e1 + (cg1 - cg3) ^ 2 * p11 ^ 2 / 0.3e1 + (cg1 - cg3) ^ 2 * p21 ^ 2 / 0.3e1 + cg ^ 2 * cg3 ^ 2) * log((cg - cg7) * cg1 + cg3 * cg7) + 0.6e1 * (-(cg1 - cg3) ^ 3 * (-cg7 + cg5) * p12 ^ 2 / 0.2e1 + p11 * ((cg - cg5) * cg1 + cg3 * cg5) * (cg1 - cg3) ^ 2 * p12 - (cg1 - cg3) ^ 3 * (-cg7 + cg5) * p22 ^ 2 / 0.2e1 + p21 * ((cg - cg5) * cg1 + cg3 * cg5) * (cg1 - cg3) ^ 2 * p22 + cg ^ 2 * ((0.3e1 / 0.2e1 * cg5 - cg7 / 0.2e1) * cg3 + cg1 * (cg - 0.3e1 / 0.2e1 * cg5 + cg7 / 0.2e1)) * cg3 ^ 2) * (-cg7 + cg5) * (cg1 - cg3)) * (((cg1 - cg3) ^ 2 * p12 ^ 2 + cg ^ 2 * cg3 ^ 2) * p21 ^ 2 - 0.2e1 * (p12 * (cg1 - cg3) ^ 2 * p11 + cg ^ 2 * cg3 ^ 2) * p22 * p21 + ((cg1 - cg3) ^ 2 * p11 ^ 2 + cg ^ 2 * cg3 ^ 2) * p22 ^ 2 + cg3 ^ 2 * cg ^ 2 * (-p12 + p11) ^ 2) ^ (-0.1e1 / 0.2e1) / (-cg7 + cg5) ^ 2 / (cg1 - cg3) ^ 3 / 0.6e1;

% Kbd(3,4)
Kbd(3,4) = (-0.6e1 * ((cg - cg5) * cg1 + cg3 * cg5) ^ 2 * ((cg1 - cg3) ^ 2 * p12 ^ 2 / 0.3e1 + p12 * (cg1 - cg3) ^ 2 * p11 / 0.3e1 + (cg1 - cg3) ^ 2 * p22 ^ 2 / 0.3e1 + p21 * (cg1 - cg3) ^ 2 * p22 / 0.3e1 + (cg1 - cg3) ^ 2 * p11 ^ 2 / 0.3e1 + (cg1 - cg3) ^ 2 * p21 ^ 2 / 0.3e1 + cg ^ 2 * cg3 ^ 2) * log((cg - cg5) * cg1 + cg3 * cg5) + 0.6e1 * ((cg - cg5) * cg1 + cg3 * cg5) ^ 2 * ((cg1 - cg3) ^ 2 * p12 ^ 2 / 0.3e1 + p12 * (cg1 - cg3) ^ 2 * p11 / 0.3e1 + (cg1 - cg3) ^ 2 * p22 ^ 2 / 0.3e1 + p21 * (cg1 - cg3) ^ 2 * p22 / 0.3e1 + (cg1 - cg3) ^ 2 * p11 ^ 2 / 0.3e1 + (cg1 - cg3) ^ 2 * p21 ^ 2 / 0.3e1 + cg ^ 2 * cg3 ^ 2) * log((cg - cg7) * cg1 + cg3 * cg7) - 0.6e1 * (-cg7 + cg5) * (cg1 - cg3) * (((cg - cg5) * cg1 + cg3 * cg5) * (cg1 - cg3) ^ 2 * p11 ^ 2 / 0.2e1 - p12 * (cg1 - cg3) ^ 3 * (-cg7 + cg5) * p11 / 0.2e1 + ((cg - cg5) * cg1 + cg3 * cg5) * (cg1 - cg3) ^ 2 * p12 ^ 2 / 0.2e1 + ((cg - cg5) * cg1 + cg3 * cg5) * (cg1 - cg3) ^ 2 * p21 ^ 2 / 0.2e1 - p22 * (cg1 - cg3) ^ 3 * (-cg7 + cg5) * p21 / 0.2e1 + ((cg - cg5) * cg1 + cg3 * cg5) * (cg1 - cg3) ^ 2 * p22 ^ 2 / 0.2e1 + cg ^ 2 * ((0.3e1 / 0.2e1 * cg5 - cg7 / 0.2e1) * cg3 + cg1 * (cg - 0.3e1 / 0.2e1 * cg5 + cg7 / 0.2e1)) * cg3 ^ 2)) * (((cg1 - cg3) ^ 2 * p12 ^ 2 + cg ^ 2 * cg3 ^ 2) * p21 ^ 2 - 0.2e1 * (p12 * (cg1 - cg3) ^ 2 * p11 + cg ^ 2 * cg3 ^ 2) * p22 * p21 + ((cg1 - cg3) ^ 2 * p11 ^ 2 + cg ^ 2 * cg3 ^ 2) * p22 ^ 2 + cg3 ^ 2 * cg ^ 2 * (-p12 + p11) ^ 2) ^ (-0.1e1 / 0.2e1) / (-cg7 + cg5) ^ 2 / (cg1 - cg3) ^ 3 / 0.6e1;

% Kbd(4,1)
Kbd(4,1) = (0.6e1 * ((cg - cg5) * cg1 + cg3 * cg5) * ((cg1 - cg3) ^ 2 * p12 ^ 2 / 0.3e1 + p12 * (cg1 - cg3) ^ 2 * p11 / 0.3e1 + (cg1 - cg3) ^ 2 * p22 ^ 2 / 0.3e1 + p21 * (cg1 - cg3) ^ 2 * p22 / 0.3e1 + (cg1 - cg3) ^ 2 * p11 ^ 2 / 0.3e1 + (cg1 - cg3) ^ 2 * p21 ^ 2 / 0.3e1 + cg ^ 2 * cg3 ^ 2) * ((cg - cg7) * cg1 + cg3 * cg7) * log((cg - cg5) * cg1 + cg3 * cg5) - 0.6e1 * ((cg - cg5) * cg1 + cg3 * cg5) * ((cg1 - cg3) ^ 2 * p12 ^ 2 / 0.3e1 + p12 * (cg1 - cg3) ^ 2 * p11 / 0.3e1 + (cg1 - cg3) ^ 2 * p22 ^ 2 / 0.3e1 + p21 * (cg1 - cg3) ^ 2 * p22 / 0.3e1 + (cg1 - cg3) ^ 2 * p11 ^ 2 / 0.3e1 + (cg1 - cg3) ^ 2 * p21 ^ 2 / 0.3e1 + cg ^ 2 * cg3 ^ 2) * ((cg - cg7) * cg1 + cg3 * cg7) * log((cg - cg7) * cg1 + cg3 * cg7) + 0.6e1 * (-cg7 + cg5) * (cg1 - cg3) * ((cg1 - cg3) ^ 2 * ((cg - cg7) * cg1 + cg3 * cg7) * p11 ^ 2 / 0.2e1 + ((cg - cg5) * cg1 + cg3 * cg5) * (cg1 - cg3) ^ 2 * p12 ^ 2 / 0.2e1 + (cg1 - cg3) ^ 2 * ((cg - cg7) * cg1 + cg3 * cg7) * p21 ^ 2 / 0.2e1 + ((cg - cg5) * cg1 + cg3 * cg5) * (cg1 - cg3) ^ 2 * p22 ^ 2 / 0.2e1 + cg ^ 2 * (cg3 * (cg5 / 0.2e1 + cg7 / 0.2e1) + (cg - cg5 / 0.2e1 - cg7 / 0.2e1) * cg1) * cg3 ^ 2)) * (((cg1 - cg3) ^ 2 * p12 ^ 2 + cg ^ 2 * cg3 ^ 2) * p21 ^ 2 - 0.2e1 * (p12 * (cg1 - cg3) ^ 2 * p11 + cg ^ 2 * cg3 ^ 2) * p22 * p21 + ((cg1 - cg3) ^ 2 * p11 ^ 2 + cg ^ 2 * cg3 ^ 2) * p22 ^ 2 + cg3 ^ 2 * cg ^ 2 * (-p12 + p11) ^ 2) ^ (-0.1e1 / 0.2e1) / (-cg7 + cg5) ^ 2 / (cg1 - cg3) ^ 3 / 0.6e1;

% Kbd(4,2)
Kbd(4,2) = (-0.6e1 * ((cg - cg5) * cg1 + cg3 * cg5) * (cg3 ^ 2 * (cg ^ 2 + p11 ^ 2 / 0.3e1 + p12 * p11 / 0.3e1 + p12 ^ 2 / 0.3e1 + p21 ^ 2 / 0.3e1 + p21 * p22 / 0.3e1 + p22 ^ 2 / 0.3e1) - 0.2e1 / 0.3e1 * cg3 * (p11 ^ 2 + p12 * p11 + p12 ^ 2 + p21 ^ 2 + p21 * p22 + p22 ^ 2) * cg1 + (p11 ^ 2 + p12 * p11 + p12 ^ 2 + p21 ^ 2 + p21 * p22 + p22 ^ 2) * cg1 ^ 2 / 0.3e1) * ((cg - cg7) * cg1 + cg3 * cg7) * log((cg - cg5) * cg1 + cg3 * cg5) + 0.6e1 * ((cg - cg5) * cg1 + cg3 * cg5) * (cg3 ^ 2 * (cg ^ 2 + p11 ^ 2 / 0.3e1 + p12 * p11 / 0.3e1 + p12 ^ 2 / 0.3e1 + p21 ^ 2 / 0.3e1 + p21 * p22 / 0.3e1 + p22 ^ 2 / 0.3e1) - 0.2e1 / 0.3e1 * cg3 * (p11 ^ 2 + p12 * p11 + p12 ^ 2 + p21 ^ 2 + p21 * p22 + p22 ^ 2) * cg1 + (p11 ^ 2 + p12 * p11 + p12 ^ 2 + p21 ^ 2 + p21 * p22 + p22 ^ 2) * cg1 ^ 2 / 0.3e1) * ((cg - cg7) * cg1 + cg3 * cg7) * log((cg - cg7) * cg1 + cg3 * cg7) - 0.6e1 * (-cg7 + cg5) * (cg3 * (cg5 / 0.2e1 + cg7 / 0.2e1) + (cg - cg5 / 0.2e1 - cg7 / 0.2e1) * cg1) * (cg1 - cg3) * ((p12 * p11 + p21 * p22) * cg1 ^ 2 - 0.2e1 * (p12 * p11 + p21 * p22) * cg3 * cg1 + cg3 ^ 2 * (cg ^ 2 + p12 * p11 + p21 * p22))) * (((cg1 - cg3) ^ 2 * p12 ^ 2 + cg ^ 2 * cg3 ^ 2) * p21 ^ 2 - 0.2e1 * (p12 * (cg1 - cg3) ^ 2 * p11 + cg ^ 2 * cg3 ^ 2) * p22 * p21 + ((cg1 - cg3) ^ 2 * p11 ^ 2 + cg ^ 2 * cg3 ^ 2) * p22 ^ 2 + cg3 ^ 2 * cg ^ 2 * (-p12 + p11) ^ 2) ^ (-0.1e1 / 0.2e1) / (-cg7 + cg5) ^ 2 / (cg1 - cg3) ^ 3 / 0.6e1;

% Kbd(4,3)
Kbd(4,3) = (-0.6e1 * ((cg - cg5) * cg1 + cg3 * cg5) ^ 2 * ((cg1 - cg3) ^ 2 * p12 ^ 2 / 0.3e1 + p12 * (cg1 - cg3) ^ 2 * p11 / 0.3e1 + (cg1 - cg3) ^ 2 * p22 ^ 2 / 0.3e1 + p21 * (cg1 - cg3) ^ 2 * p22 / 0.3e1 + (cg1 - cg3) ^ 2 * p11 ^ 2 / 0.3e1 + (cg1 - cg3) ^ 2 * p21 ^ 2 / 0.3e1 + cg ^ 2 * cg3 ^ 2) * log((cg - cg5) * cg1 + cg3 * cg5) + 0.6e1 * ((cg - cg5) * cg1 + cg3 * cg5) ^ 2 * ((cg1 - cg3) ^ 2 * p12 ^ 2 / 0.3e1 + p12 * (cg1 - cg3) ^ 2 * p11 / 0.3e1 + (cg1 - cg3) ^ 2 * p22 ^ 2 / 0.3e1 + p21 * (cg1 - cg3) ^ 2 * p22 / 0.3e1 + (cg1 - cg3) ^ 2 * p11 ^ 2 / 0.3e1 + (cg1 - cg3) ^ 2 * p21 ^ 2 / 0.3e1 + cg ^ 2 * cg3 ^ 2) * log((cg - cg7) * cg1 + cg3 * cg7) - 0.6e1 * (-cg7 + cg5) * (cg1 - cg3) * (((cg - cg5) * cg1 + cg3 * cg5) * (cg1 - cg3) ^ 2 * p11 ^ 2 / 0.2e1 - p12 * (cg1 - cg3) ^ 3 * (-cg7 + cg5) * p11 / 0.2e1 + ((cg - cg5) * cg1 + cg3 * cg5) * (cg1 - cg3) ^ 2 * p12 ^ 2 / 0.2e1 + ((cg - cg5) * cg1 + cg3 * cg5) * (cg1 - cg3) ^ 2 * p21 ^ 2 / 0.2e1 - p22 * (cg1 - cg3) ^ 3 * (-cg7 + cg5) * p21 / 0.2e1 + ((cg - cg5) * cg1 + cg3 * cg5) * (cg1 - cg3) ^ 2 * p22 ^ 2 / 0.2e1 + cg ^ 2 * ((0.3e1 / 0.2e1 * cg5 - cg7 / 0.2e1) * cg3 + cg1 * (cg - 0.3e1 / 0.2e1 * cg5 + cg7 / 0.2e1)) * cg3 ^ 2)) * (((cg1 - cg3) ^ 2 * p12 ^ 2 + cg ^ 2 * cg3 ^ 2) * p21 ^ 2 - 0.2e1 * (p12 * (cg1 - cg3) ^ 2 * p11 + cg ^ 2 * cg3 ^ 2) * p22 * p21 + ((cg1 - cg3) ^ 2 * p11 ^ 2 + cg ^ 2 * cg3 ^ 2) * p22 ^ 2 + cg3 ^ 2 * cg ^ 2 * (-p12 + p11) ^ 2) ^ (-0.1e1 / 0.2e1) / (-cg7 + cg5) ^ 2 / (cg1 - cg3) ^ 3 / 0.6e1;

% Kbd(4,4)
Kbd(4,4) = (0.6e1 * ((cg - cg5) * cg1 + cg3 * cg5) ^ 2 * ((cg1 - cg3) ^ 2 * p12 ^ 2 / 0.3e1 + p12 * (cg1 - cg3) ^ 2 * p11 / 0.3e1 + (cg1 - cg3) ^ 2 * p22 ^ 2 / 0.3e1 + p21 * (cg1 - cg3) ^ 2 * p22 / 0.3e1 + (cg1 - cg3) ^ 2 * p11 ^ 2 / 0.3e1 + (cg1 - cg3) ^ 2 * p21 ^ 2 / 0.3e1 + cg ^ 2 * cg3 ^ 2) * log((cg - cg5) * cg1 + cg3 * cg5) - 0.6e1 * ((cg - cg5) * cg1 + cg3 * cg5) ^ 2 * ((cg1 - cg3) ^ 2 * p12 ^ 2 / 0.3e1 + p12 * (cg1 - cg3) ^ 2 * p11 / 0.3e1 + (cg1 - cg3) ^ 2 * p22 ^ 2 / 0.3e1 + p21 * (cg1 - cg3) ^ 2 * p22 / 0.3e1 + (cg1 - cg3) ^ 2 * p11 ^ 2 / 0.3e1 + (cg1 - cg3) ^ 2 * p21 ^ 2 / 0.3e1 + cg ^ 2 * cg3 ^ 2) * log((cg - cg7) * cg1 + cg3 * cg7) + 0.6e1 * (-(cg1 - cg3) ^ 3 * (-cg7 + cg5) * p11 ^ 2 / 0.2e1 + p11 * ((cg - cg5) * cg1 + cg3 * cg5) * (cg1 - cg3) ^ 2 * p12 - (cg1 - cg3) ^ 3 * (-cg7 + cg5) * p21 ^ 2 / 0.2e1 + p21 * ((cg - cg5) * cg1 + cg3 * cg5) * (cg1 - cg3) ^ 2 * p22 + cg ^ 2 * ((0.3e1 / 0.2e1 * cg5 - cg7 / 0.2e1) * cg3 + cg1 * (cg - 0.3e1 / 0.2e1 * cg5 + cg7 / 0.2e1)) * cg3 ^ 2) * (-cg7 + cg5) * (cg1 - cg3)) * (((cg1 - cg3) ^ 2 * p12 ^ 2 + cg ^ 2 * cg3 ^ 2) * p21 ^ 2 - 0.2e1 * (p12 * (cg1 - cg3) ^ 2 * p11 + cg ^ 2 * cg3 ^ 2) * p22 * p21 + ((cg1 - cg3) ^ 2 * p11 ^ 2 + cg ^ 2 * cg3 ^ 2) * p22 ^ 2 + cg3 ^ 2 * cg ^ 2 * (-p12 + p11) ^ 2) ^ (-0.1e1 / 0.2e1) / (-cg7 + cg5) ^ 2 / (cg1 - cg3) ^ 3 / 0.6e1;

end

