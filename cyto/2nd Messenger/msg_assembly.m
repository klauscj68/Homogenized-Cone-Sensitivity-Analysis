function [Mgl,Kgl] = msg_assembly(M,Msl,...
                                  K,Ksl,n_pts,...
                                  R_b,R_t,H,...
                                  nu,cosgamma0,sigma,epsilon_0,...
                                  kk_u,kk_v,...
                                  E_vol,k_hyd)
%Build the matrices used in solving FEM system for volumic (cG,Ca)
%   Given the geometric matrices M = \int_Vol phi_i*phi_j, 
%   Msl = \int_Sl phi_i*phi_j, and
%   K    = \int_vol Dx,y phi_i*Dx,y phi_j, 
%   K_sl = \int_Sl D_LB phi* D_LB phi_j,
%   n_pts is the number of nodes over the mesh
%   the geometric parameters, and diffusion coefficients for cG and Ca
%   build the global matrices M_gl, K_gl for our FEM discretized (cG,Ca) 
%   system.

%% Build M_gl
% This matrix has diagonal block form
% [[ nu/(1+nu)*M+sigma*epsilon_0*cosgamma0*Msl 0 ];...
%   [0                                         nu/(1+nu)*M+sigma*epsilon_0*cosgamma0*Msl]]

[I_M,J_M,V_M] = find(M);
[I_Msl,J_Msl,V_Msl] = find(Msl);

% Accumarray for the cG system
I_Mgl = [I_M;...
         I_Msl];
J_Mgl = [J_M;...
         J_Msl];
V_Mgl = [nu/(1+nu)*V_M;...
         sigma*epsilon_0*cosgamma0*V_Msl];

% Accumarray and augment for the Ca system
I_Mgl = [I_Mgl;...
         n_pts + I_Mgl];
J_Mgl = [J_Mgl;...
         n_pts + J_Mgl];
V_Mgl = repmat(V_Mgl,2,1);

% Build sparse matrix
Mgl = sparse(I_Mgl,J_Mgl,V_Mgl);

%% Build K_gl system
% This matrix has diagonal block form
% [[ nu/(1+nu)*kk_u*K + sigma*epsilon_0*cosgamma0*kk_u*Ksl + nu/(1+nu)*k_hyd/2*E_vol*M 0                                                   ];...
%   [0                                                                               nu/(1+nu)*kk_v*K+sigma*epsilon_0*cosgamma0*kk_v*Ksl]]

[I_K,J_K,V_K] = find(K);
[I_Ksl,J_Ksl,V_Ksl] = find(Ksl);

% Accumarray for the cG system
I_Kgl = [I_K;...
         I_Ksl;...
         I_M];
J_Kgl = [J_K;...
         J_Ksl;...
         J_M];
V_Kgl = [nu/(1+nu)*kk_u*V_K;...
         sigma*epsilon_0*cosgamma0*kk_u*V_Ksl;...
         nu/(1+nu)*k_hyd/2*E_vol*V_M];

% Accumarray and augment for the Ca system
I_Kgl = [I_Kgl;...
         n_pts + I_K;...
         n_pts + I_Ksl];
J_Kgl = [J_Kgl;...
         n_pts + J_K;...
         n_pts + J_Ksl];
V_Kgl = [V_Kgl;...
         nu/(1+nu)*kk_v*V_K;...
         sigma*epsilon_0*cosgamma0*kk_v*V_Ksl];
     
% Build sparse matrix
Kgl = sparse(I_Kgl,J_Kgl,V_Kgl);

end

