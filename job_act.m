% Simulate the cascade for light activation of R*,G*,E*
%% Grab the data
        
         [R_b,R_t,H,cosgamma0,theta_in,theta_fin,epsilon_0,nu,sigma,...
          flag_ch,...
          n_sez,taglia,tol_R,tol_angle,...
          method_cyto,theta,alpha,tol_fix,norma_inf,t_fin,...
          n_step_t,downsample,...
          tol_stat,...
          N_Av,F,...
          B_cG,B_Ca,...
          nu_RG,D_R_st,k_R,R_sigma,...
          k_GE,D_G_st,G_sigma,...
          D_E_st,k_E,PDE_sigma,Beta_dark,K_m,k_cat,...
          E_sigma,E_vol,k_hyd,kcat_DIV_Km,k_st,...
          u_tent,kk_u,...
          v_tent,kk_v,...
          j_cG_max,m_cG,K_cG,f_Ca,...
          j_ex_sat,K_ex,...
          alpha_max,alpha_min,m_cyc,K_cyc,...
          n_Rst0,rate,...
          flag_restart,rst_index] = ...
          data(datamat,pointer);
      
%% Generate the mesh
[pts,prisms,faces_sl,faces_fo,...
          n_pts,n_prism,n_fsl,n_ffo] = ...
          genmesh(R_b,R_t,H,theta_in,theta_fin,epsilon_0,nu,sigma,...
                  n_sez,taglia,tol_R,tol_angle);
              
pts_eul = map_to_eul(pts,...
                     R_b,R_t,H);
      
%% Generate Volumetric FEM matrices
M = mvol(pts,prisms,...
         R_b,R_t,H);
K = kvol(pts,prisms,...
         R_b,R_t,H);
Msl = mbd(pts,faces_sl,...
          R_b,R_t,H);
Ksl = kbd(pts,faces_sl,...
          R_b,R_t,H);
Mfo = mbd(pts,faces_fo,...
          R_b,R_t,H);

%% Integrate the FEM System
% Begin with the initial concentration of Rst0
Rst0 = Rst_0(pts_eul,...
             R_b,R_t,H,...
             nu,epsilon_0,...
             n_Rst0);

% Begin with zero concentration of Gst0 and Est0
Gst0 = zeros(n_pts,1);
Est0 = zeros(n_pts,1);

S0_gl = [Rst0;...
         Gst0;...
         Est0];

% Initialize remaining parameters for activation
F_st = NaN;
tpts = NaN;
flag_case = 'Act';
     
% Run integration
[S_gl,taxis] = ode_integrate(M,K,Msl,Ksl,Mfo,n_pts,...
                                      pts_eul,...
                                      S0_gl,...
                                      F_st,tpts,...
                                      flag_case,...
                                      flag_preassembled,...
                                      R_b,R_t,H,cosgamma0,theta_in,theta_fin,epsilon_0,nu,sigma,...
                                      flag_ch,...
                                      n_sez,taglia,tol_R,tol_angle,...
                                      method_cyto,theta,alpha,tol_fix,norma_inf,t_fin,...
                                      n_step_t,downsample,...
                                      tol_stat,...
                                      N_Av,F,...
                                      B_cG,B_Ca,...
                                      nu_RG,D_R_st,k_R,R_sigma,...
                                      k_GE,D_G_st,G_sigma,...
                                      D_E_st,k_E,PDE_sigma,Beta_dark,K_m,k_cat,...
                                      E_sigma,E_vol,k_hyd,kcat_DIV_Km,k_st,...
                                      u_tent,kk_u,...
                                      v_tent,kk_v,...
                                      j_cG_max,m_cG,K_cG,f_Ca,...
                                      j_ex_sat,K_ex,...
                                      alpha_max,alpha_min,m_cyc,K_cyc,...
                                      n_Rst0,rate,...
                                      flag_restart,rst_index);
                                  
%% Break solution up into R*,G*,E*
Rst_sig = S_gl(1:n_pts,:);
Gst_sig = S_gl(n_pts+1:2*n_pts,:);
Est_sig = S_gl(2*n_pts + 1:3*n_pts,:);

save('activation','Rst_sig','Gst_sig','Est_sig','taxis', '-v7.3')
