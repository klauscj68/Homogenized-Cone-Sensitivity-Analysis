function [activation,Evol,messenger] =...
                                      par_trial(datamat,pointer,...
                                                param,delta_r)
%Run cone response for given parameters and param rel shift by delta_r
%   datamat, pointer are those output by data. param is the index of
%    datamat that is undergoing a relative shift of delta_r
%   activation,Evol, messenger are cells that contain the necessary output 

%% New parameter value
if param ~= 0
    datamat(param) = (1+delta_r)*datamat(param);
end
%% Declare auxiliary flags
flag_preassembled = false;

%% Update dependent parameters
% cosgamma0 dependended on R_b,R_t,H
if (param == 1)||(param == 2)||(param==3)
   datamat(4) = fcosgamma0(...
                               datamat(1),datamat(2),...
                               datamat(3));
end
        
% E_sigma dependend on PDE_sigma
if param == pointer(8)+3
   datamat(...
           pointer(9)+1 ...
                        ) = fE_sigma(...
                                     datamat(pointer(8)+3) ...
                                    );
end
        
% E_vol dependended on PDE_sigma, nu, epsilon_0
if (param == pointer(8) + 3)||...
   (param == 8) || (param == 7)            
   datamat(...
               pointer(9) + 2 ...
                                  ) = ...
                                 fE_vol(datamat(pointer(8)+3),...
                                        datamat(8),...
                                        datamat(7)...
                                        );
                                        
end
        
% k_hyd depended on nu,epsilon_0,Beta_dark,PDE_sigma
if (param == 8) || (param == 7) || (param == pointer(8)+4) ||...
   (param == pointer(8)+3)
       
   datamat(...
           pointer(9)+3 ...
          ) = ...
              fk_hyd(datamat(8),...
                     datamat(7),...
                     datamat(pointer(8)+4),...
                     datamat(pointer(8)+3));
                   
end
        
% kcat_DIV_Km depended on k_cat,K_m
if (param == pointer(8) + 6) || (param == pointer(8) + 5)
   datamat(...
           pointer(9)+4 ...
                        ) = ...
                            fkcat_DIV_Km(datamat(pointer(8) + 6),...
                                         datamat(pointer(8) + 5));
end
        
% k_st dependend on kcat_DIV_Km (proxy: k_cat,K_m), B_cG
if (param == pointer(8) + 6) || (param == pointer(8) + 5) || ...
   (param == pointer(9) + 4) || (param == pointer(5) + 1)            
   % We've already updated kcat_DIV_Km to reflect changes in
   % k_cat, K_m        
   datamat(...
           pointer(9)+5 ...
                        ) = fk_st(datamat(pointer(9) + 4),...
                                  datamat(pointer(5) + 1));
end
        
% j_cG_max depended on B_Ca
if param == pointer(5) + 2
   datamat(...
           pointer(12) + 1 ...
                          ) = fj_cG_max(datamat(pointer(12)+1),...
                                        datamat(pointer(5)+2),...
                                        datamat(pointer(4)+2),...
                                        delta_r);
end
        
% j_ex_sat dependend on B_Ca
if param == pointer(5) + 2
   datamat(...
           pointer(13) + 1 ...
                          ) = fj_cG_max(datamat(pointer(13)+1),...
                                        datamat(pointer(5)+2),...
                                        datamat(pointer(4)+2),...
                                        delta_r);
end

%% Grab the data
[R_b,R_t,H,cosgamma0,theta_in,theta_fin,epsilon_0,nu,sigma,...
          flag_ch,...
          n_sez,taglia,tol_R,tol_angle,...
          method_cyto,theta,alpha,tol_fix,norma_inf,t_fin,...
          n_step_t,downsample,...
          tol_stat,...
          N_Av,F,...
          B_cG,B_Ca,...
          nu_RG,D_R_st,k_R,R_sigma,...
          k_GE,D_G_st,G_sigma,...
          D_E_st,k_E,PDE_sigma,Beta_dark,K_m,k_cat,...
          E_sigma,E_vol,k_hyd,kcat_DIV_Km,k_st,...
          u_tent,kk_u,...
          v_tent,kk_v,...
          j_cG_max,m_cG,K_cG,f_Ca,...
          j_ex_sat,K_ex,...
          alpha_max,alpha_min,m_cyc,K_cyc,...
          n_Rst0,rate,...
          flag_restart,rst_index] = ...
          data(datamat,pointer);

%% Generate the mesh
[pts,prisms,faces_sl,faces_fo,...
          n_pts,n_prism,n_fsl,n_ffo] = ...
          genmesh(R_b,R_t,H,theta_in,theta_fin,epsilon_0,nu,sigma,...
                  n_sez,taglia,tol_R,tol_angle);
              
pts_eul = map_to_eul(pts,...
                     R_b,R_t,H);
%% Generate Volumetric FEM matrices
M = mvol(pts,prisms,...
         R_b,R_t,H);
K = kvol(pts,prisms,...
         R_b,R_t,H);
Msl = mbd(pts,faces_sl,...
          R_b,R_t,H);
Ksl = kbd(pts,faces_sl,...
          R_b,R_t,H);
Mfo = mbd(pts,faces_fo,...
          R_b,R_t,H);
      
%% Integrate the Activation System
% Begin with the initial concentration of Rst0
Rst0 = Rst_0(pts_eul,...
             R_b,R_t,H,...
             nu,epsilon_0,...
             n_Rst0);

% Begin with zero concentration of Gst0 and Est0
Gst0 = zeros(n_pts,1);
Est0 = zeros(n_pts,1);

S0_gl = [Rst0;...
         Gst0;...
         Est0];

% Initialize remaining parameters for activation
F_st = NaN;
tpts = NaN;
flag_case = 'Act';
     
% Run integration
[S_gl,taxis] = ode_integrate(M,K,Msl,Ksl,Mfo,n_pts,...
                                      pts_eul,...
                                      S0_gl,...
                                      F_st,tpts,...
                                      flag_case,...
                                      flag_preassembled,...
                                      R_b,R_t,H,cosgamma0,theta_in,theta_fin,epsilon_0,nu,sigma,...
                                      flag_ch,...
                                      n_sez,taglia,tol_R,tol_angle,...
                                      method_cyto,theta,alpha,tol_fix,norma_inf,t_fin,...
                                      n_step_t,downsample,...
                                      tol_stat,...
                                      N_Av,F,...
                                      B_cG,B_Ca,...
                                      nu_RG,D_R_st,k_R,R_sigma,...
                                      k_GE,D_G_st,G_sigma,...
                                      D_E_st,k_E,PDE_sigma,Beta_dark,K_m,k_cat,...
                                      E_sigma,E_vol,k_hyd,kcat_DIV_Km,k_st,...
                                      u_tent,kk_u,...
                                      v_tent,kk_v,...
                                      j_cG_max,m_cG,K_cG,f_Ca,...
                                      j_ex_sat,K_ex,...
                                      alpha_max,alpha_min,m_cyc,K_cyc,...
                                      n_Rst0,rate,...
                                      flag_restart,rst_index);
                                  
%% Save the activation system
Rst_sig = S_gl(1:n_pts,:);
Gst_sig = S_gl(n_pts+1:2*n_pts,:);
Est_sig = S_gl(2*n_pts + 1:3*n_pts,:);

% Save into activation cell
activation = cell(4,1);
activation{1} = Rst_sig;
activation{2} = Gst_sig;
activation{3} = Est_sig;
activation{4} = taxis;

%% Convert and save the Evol system
eta0 = .5*nu*epsilon_0;
Evol = Est_sig/eta0;

% Compute mass of Evol
mass_Evol = sum(M*Evol);

% Save into Evol cell
ram = cell(3,1);
ram{1} = Evol;
ram{2} = taxis;
ram{3} = mass_Evol;
Evol = ram;



%% Integrate the Messenger System
% Compute steady state values
[cG0,Ca0]=steady_state(R_b,R_t,H,theta_in,theta_fin,epsilon_0,nu,...
                       flag_ch,...
                       tol_stat,...
                       B_Ca,F,...
                       PDE_sigma,k_hyd,...
                       u_tent,...
                       v_tent,...
                       j_cG_max,m_cG,K_cG,f_Ca,...
                       j_ex_sat,K_ex,...
                       alpha_max,alpha_min,m_cyc,K_cyc);

S0_gl = [repmat(cG0,n_pts,1);...
         repmat(Ca0,n_pts,1)];

% Initialize remaining parameters for activation
E_st = Evol{1};
tpts = taxis;
flag_case = 'Msg';     

% Run integration
[S_gl,taxis] = ode_integrate(M,K,Msl,Ksl,Mfo,n_pts,...
                                      pts_eul,...
                                      S0_gl,...
                                      E_st,tpts,...
                                      flag_case,...
                                      flag_preassembled,...
                                      R_b,R_t,H,cosgamma0,theta_in,theta_fin,epsilon_0,nu,sigma,...
                                      flag_ch,...
                                      n_sez,taglia,tol_R,tol_angle,...
                                      method_cyto,theta,alpha,tol_fix,norma_inf,t_fin,...
                                      n_step_t,downsample,...
                                      tol_stat,...
                                      N_Av,F,...
                                      B_cG,B_Ca,...
                                      nu_RG,D_R_st,k_R,R_sigma,...
                                      k_GE,D_G_st,G_sigma,...
                                      D_E_st,k_E,PDE_sigma,Beta_dark,K_m,k_cat,...
                                      E_sigma,E_vol,k_hyd,kcat_DIV_Km,k_st,...
                                      u_tent,kk_u,...
                                      v_tent,kk_v,...
                                      j_cG_max,m_cG,K_cG,f_Ca,...
                                      j_ex_sat,K_ex,...
                                      alpha_max,alpha_min,m_cyc,K_cyc,...
                                      n_Rst0,rate,...
                                      flag_restart,rst_index);
                                  
%% Break solution up into cG,Ca
cG = S_gl(1:n_pts,:);
Ca = S_gl(n_pts+1:2*n_pts,:);

%% Compute J_tot and J_drop
Sigma_sl = sum(sum(Msl));
V_cn = sum(sum(M));
Sigma_fo = sum(sum(Mfo));

Sigma_Ch = flag_ch(1)*Sigma_sl + ...
           flag_ch(2)*(nu/(1+nu))*V_cn/eta0 + ...
           flag_ch(3)*Sigma_fo;
       
% cG-gated Current
J_cG = j_cG_max/Sigma_Ch*(cG.^m_cG)./(K_cG.^m_cG + cG.^m_cG);

% Exchanger Current
J_ex = j_ex_sat/Sigma_Ch*(Ca./(K_ex+Ca));

% Integrate Current Density
J = J_cG + J_ex;

% Integrate over domain of channels
J_tot = flag_ch(1)*sum(Msl*J) + ...
           flag_ch(2)*(nu/(1+nu))/eta0*sum(M*J) + ...
           flag_ch(3)*sum(Msl*J);

J_drop = 100*(J_tot(1) - J_tot)/J_tot(1);

% Normalize out the B_Ca*F factor from j_cg and j_ex
J_tot = B_Ca*F*J_tot;

%% Save the messenger system
messenger = cell(7,1);
messenger{1} = cG;
messenger{2} = Ca;
messenger{3} = J_tot;
messenger{4} = J_drop;
messenger{5} = cG0;
messenger{6} = Ca0;
messenger{7} = taxis;
     
end

